<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Infrastructure\bin\Debug\Fabric.Infrastructure.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Infrastructure" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;

namespace Fabric.Test.Util {
	
	/*================================================================================================*/
	public static class StepUtil {

		public static Dictionary<string, string[]> NodeStepMap = BuildNodeStepMap();
		

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static Dictionary<string, string[]> BuildNodeStepMap() {
			var map = new Dictionary<string, string[]>();

<#
var schema = new Schema();

foreach ( WeaverNodeSchema node in schema.Nodes ) {
	if ( node.IsAbstract ) { continue; }

	string steps = "";
	
	foreach ( WeaverRelSchema rel in schema.Rels ) {
		if ( rel.FromNode != node && rel.ToNode != node ) { continue; }
		bool isOut = (rel.FromNode == node);

		if ( node.Name != "Root" && rel.FromNode.Name == "Root" ) { continue; }
		steps += (steps == "" ? "" : ",\r\n\t\t\t\t")+"\"/"+PathUtil.GetRelProp(rel, isOut)+"\"";
	}
#>
			map.Add("<#= node.Name #>", new [] {
				<#= steps #>
			});

<#
}
#>
			return map;
		}
		
<#
foreach ( WeaverNodeSchema node in schema.Nodes ) {
	continue; //only for generation of test cases
	if ( node.IsAbstract ) { continue; }
#>
		/*--------------------------------------------------------------------------------------------*/
		[Test]
		public void <#= node.Name #>Step() {
			TestStep("<#= node.Name #>", (tn, p) => new <#= node.Name #>Step(tn, p));
		}

<#
}
#>
	}

}