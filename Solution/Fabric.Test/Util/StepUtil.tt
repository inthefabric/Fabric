<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.Core.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;

namespace Fabric.Test.Util {
	
	/*================================================================================================*/
	public static class StepUtil {

		public static Dictionary<string, string[]> NodeStepMap = BuildNodeStepMap();
		

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static Dictionary<string, string[]> BuildNodeStepMap() {
			var map = new Dictionary<string, string[]>();
			
<#
IList<string> nodes = SchemaHelper.GetVertices();

foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverVertexSchema node = hn.NodeSchema;
	if ( node.IsAbstract || node.IsInternal ) { continue; }

	IList<SchemaHelperNodeRel> nodeRels = hn.GetNestedRels(true);
#>
			map.Add("<#= node.Name #>", new string [] {
<#
	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( node.Name != "Root" && hr.OutVertexName == "Root" ) { continue; }
#>
				"/<#= hr.RelPropName #>",
<#
	} //end nodeRels loop
#>
			});

<#
}
#>
			return map;
		}
		
<#

foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverVertexSchema node = hn.NodeSchema;
	if ( node.IsAbstract || node.IsInternal ) { continue; }
#>
		/*--------------------------------------------------------------------------------------------* /
		[Test]
		public void <#= node.Name #>Step() {
			TestStep("<#= node.Name #>", PropDbName.<#= node.Name #>_<#= node.Name #>Id, tn => new <#= node.Name #>Step(tn));
		}*/

<#
}
#>
	}

}