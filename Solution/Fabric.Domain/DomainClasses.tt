<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Infrastructure\bin\Debug\Fabric.Infrastructure.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Infrastructure.Domain" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using Weaver.Items;
using Weaver.Interfaces;

//NEXT: support validation and restrictions

namespace Fabric.Domain {


	/* Relationship Types */
	
	
<#
IList<string> relTypes = SchemaHelper.GetRelTypes();

foreach ( string name in relTypes ) {
#>
	/*================================================================================================*/
	public class <#= name #> : IWeaverRelType {
	
		public string Label { get { return "<#= name #>"; } }

	}

<#
} //end rel types loop
#>

	/* Relationships */


<#
IList<string> rels = SchemaHelper.GetRels();

foreach ( string name in rels ) {
	SchemaHelperRel rel = SchemaHelper.GetRel(name);
#>
	/*================================================================================================*/
	public class <#= rel.RelName #> : <#= rel.WeaverBaseClass #> {
			
		public virtual <#= rel.FromNodeName #> From<#= rel.FromNodeName #> { get { return FromNode; } }
		public virtual <#= rel.ToNodeName #> To<#= rel.ToNodeName #> { get { return ToNode; } }
		public override string Label { get { return "<#= rel.RelName #>"; } }

	}

<#
} //end rel names loop
#>

	/* Nodes */


<#
IList<string> nodes = SchemaHelper.GetNodes();

foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverNodeSchema node = hn.NodeSchema;
	string baseNode = (hn.HasParentClass ? node.BaseNode.Name : "Node");
	string abs = (node.IsAbstract ? "abstract " : "");
#>
	/*================================================================================================*/
	public <#= abs #>class <#= node.Name #> : <#= baseNode #> {
	
<#
	IList<SchemaHelperProp> props = hn.GetProps(false);

	foreach ( SchemaHelperProp hp in props ) { 
		WeaverPropSchema prop = hp.PropSchema;
		string propType = hp.TypeName;
		string propName = prop.Name;
		string attribs = "";
		string attEnd = "\r\n\t\t";

		attribs += "[WeaverItemProperty]"+attEnd;

		if ( prop.IsCaseInsensitive != null ) {
			attribs += "//[PropIsCaseInsensitive("+prop.IsCaseInsensitive+")]"+attEnd;
		}

		if ( prop.IsNullable != null ) {
			attribs += "//[PropIsNullable("+prop.IsNullable+")]"+attEnd;
		}

		if ( prop.IsPrimaryKey != null ) {
			attribs += "//[PropIsPrimaryKey("+prop.IsPrimaryKey+")]"+attEnd;
		}

		if ( prop.IsTimestamp != null ) {
			attribs += "//[PropIsTimestamp("+prop.IsTimestamp+")]"+attEnd;
		}

		if ( prop.IsUnique != null ) {
			attribs += "//[PropIsUnique("+prop.IsUnique+")]"+attEnd;
		}

		if ( prop.IsInternal != null ) {
			attribs += "//[PropIsInternal("+prop.IsInternal+")]"+attEnd;
		}

		if ( prop.IsPassword != null ) {
			attribs += "//[PropIsPassword("+prop.IsPassword+")]"+attEnd;
		}

		if ( prop.Len != null ) {
			attribs += "//[PropLen("+prop.Len+")]"+attEnd;
		}

		if ( prop.LenMax != null ) {
			attribs += "//[PropLenMax("+prop.LenMax+")]"+attEnd;
		}

		if ( prop.LenMin != null ) {
			attribs += "//[PropLenMin("+prop.LenMin+")]"+attEnd;
		}

		if ( prop.ValidRegex != null ) {
			attribs += "//[PropValidRegex(@\""+prop.ValidRegex+"\")]"+attEnd;
		}

#>
		<#= attribs #>public virtual <#= propType+" "+propName #> { get; set; }

<#
	}

	if ( node.IsRoot ) {
#>

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public override bool IsRoot { get { return (Path == null || PathIndex == 0); } }
		
		/*--------------------------------------------------------------------------------------------*/
		public override long GetTypeId() { return 1; }


		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	} //end if "isRoot"
	else if ( !node.IsAbstract ) {
#>

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public override long GetTypeId() { return <#= node.Name #>Id; }

		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	} //end else !"isAbstract"

	IList<SchemaHelperNodeRel> nodeRels = hn.GetRels();

	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
#>
		/*--------------------------------------------------------------------------------------------*/
		public virtual <#= hr.RelName #> <#= hr.RelPropName #> {
			get { return NewRel<<#= hr.RelName #>>(WeaverRelConn.<#= hr.Conn+"" #>); }
		}

<#
	}
#>
	}

<#
}
#>
}
