<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="Z:\Work\AestheticInteractive\FabricProject\Fabric2\Packages\Weaver\Weaver.dll" #>
<#@ assembly name="Z:\Work\AestheticInteractive\FabricProject\Fabric2\Solution\Fabric.Domain.Schema\bin\Debug\Fabric.Domain.Schema.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Schema" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using Weaver.Items;
using Weaver.Interfaces;

//NEXT: support validation and restrictions

namespace Fabric.Domain {


	/* Relationship Types */
	
	
<#
var schema = new GraphSchema();
var relTypeMap = new Dictionary<string, bool>();

foreach ( WeaverRelSchema rel in schema.Rels ) {
	if ( relTypeMap.ContainsKey(rel.Name) ) { continue; }
	relTypeMap.Add(rel.Name, true);
#>
	/*================================================================================================*/
	public class <#= rel.Name #> : IWeaverRelType {
	
		public string Label { get { return "<#= rel.Name #>"; } }

	}

<#
}
#>

	/* Relationships */


<#
var relMap = new Dictionary<string, bool>();

foreach ( WeaverNodeSchema node in schema.Nodes ) {
	foreach ( WeaverRelSchema rel in schema.Rels ) {
		//var relOut = (rel.FromNode == node);
		//var relDir = (relOut ? "Out" : "In");
		//var relAmt = ((relOut && rel.Many) || (!relOut && rel.RevMany) ? "List" : "");
		var fromNode = rel.FromNode.Name;
		var toNode = rel.ToNode.Name;
		string relClass = fromNode+rel.Name+toNode;
		
		if ( relMap.ContainsKey(relClass) ) { continue; }
		relMap.Add(relClass, true);

		string interfaceTypes = "<IQuery"+rel.FromNode.Name+", IQuery"+rel.ToNode.Name+">";
		string classTypes = 
			"<"+
			"IQuery"+rel.FromNode.Name+", "+
			rel.FromNode.Name+", "+
			rel.Name+", "+
			"IQuery"+rel.ToNode.Name+", "+
			rel.ToNode.Name+
			">";
#>
	/*================================================================================================*/
	public interface I<#= GetRelClassName(node, rel) #> :
			IWeaverRel<#= interfaceTypes #>, IWeaverQueryRel {

		IQuery<#= rel.FromNode.Name #> From<#= rel.FromNode.Name #> { get; }
		IQuery<#= rel.ToNode.Name #> To<#= rel.ToNode.Name #> { get; }

	}

	/*================================================================================================*/
	public class <#= GetRelClassName(node, rel) #> :
			WeaverRel<#= classTypes #>,
			I<#= relClass #> {
			
		public virtual IQuery<#= rel.FromNode.Name #> From<#= rel.FromNode.Name #> { get { return FromNode; } }
		public virtual IQuery<#= rel.ToNode.Name #> To<#= rel.ToNode.Name #> { get { return ToNode; } }
		public override string Label { get { return "<#= rel.FromNode.Name+rel.Name+rel.ToNode.Name #>"; } }

	}

<#
	}
}
#>


	/* Query Nodes interfaces */


<#
foreach ( WeaverNodeSchema node in schema.Nodes ) {
#>
	/*================================================================================================*/
	public interface IQuery<#= node.Name #> : IWeaverQueryNode {

<#
	foreach ( WeaverRelSchema rel in schema.Rels ) {
		if ( rel.FromNode != node && rel.ToNode != node ) { continue; }
#>
		I<#= GetRelClassName(node, rel) #> <#= GetRelPropName(node, rel) #> { get; } //<#= GetRelConn(node, rel) #>
<#
	}
#>

	}

<#
}
#>

	/* Nodes */


<#
foreach ( WeaverNodeSchema node in schema.Nodes ) {
#>
	/*================================================================================================*/
	public class <#= node.Name #> : WeaverNode, IQuery<#= node.Name #> {
	
<#
	foreach ( WeaverPropSchema prop in node.Props ) { 
		string propType = prop.Type.Name;
		string propName = prop.Name;
		string attribs = "";
		string attEnd = "\r\n\t\t";
		
		switch ( prop.Type.Name ) {
			case "Int64": propType = "long"; break;
			case "Byte": propType = "byte"; break;
			case "String": propType = "string"; break;
			case "Boolean": propType = "bool"; break;
			case "Single": propType = "float"; break;
			case "Double": propType = "double"; break;
			case "DateTime": propType = "long"; propName += "Timestamp"; break;
		}

		if ( prop.IsCaseInsensitive != null ) {
			attribs += "//[PropIsCaseInsensitive("+prop.IsCaseInsensitive+")]"+attEnd;
		}

		if ( prop.IsNullable != null ) {
			attribs += "//[PropIsNullable("+prop.IsNullable+")]"+attEnd;
		}

		if ( prop.IsPrimaryKey != null ) {
			attribs += "//[PropIsPrimaryKey("+prop.IsPrimaryKey+")]"+attEnd;
		}

		if ( prop.IsTimestamp != null ) {
			attribs += "//[PropIsTimestamp("+prop.IsTimestamp+")]"+attEnd;
		}

		if ( prop.IsUnique != null ) {
			attribs += "//[PropIsUnique("+prop.IsUnique+")]"+attEnd;
		}

		if ( prop.Len != null ) {
			attribs += "//[PropLen("+prop.Len+")]"+attEnd;
		}

		if ( prop.LenMax != null ) {
			attribs += "//[PropLenMax("+prop.LenMax+")]"+attEnd;
		}

		if ( prop.LenMin != null ) {
			attribs += "//[PropLenMin("+prop.LenMin+")]"+attEnd;
		}

		if ( prop.ValidRegex != null ) {
			attribs += "//[PropValidRegex(\""+prop.ValidRegex+"\")]"+attEnd;
		}

#>
		<#= attribs #>public virtual <#= propType+" "+propName #> { get; set; }

<#
	}

	if ( node.IsRoot ) {
#>
		public override bool IsRoot { get { return true; } }
<#
	} //end if "isRoot"

	foreach ( WeaverRelSchema rel in schema.Rels ) {
		if ( rel.FromNode != node && rel.ToNode != node ) { continue; }
		string relClass = GetRelClassName(node, rel);
#>

		/*--------------------------------------------------------------------------------------------*/
		public virtual I<#= relClass #> <#= GetRelPropName(node, rel) #> {
			get { return NewRel<<#= relClass #>>(WeaverRelConn.<#= GetRelConn(node, rel) #>); }
		}
<#
	}
#>

	}

<#
}
#>
}
<#+

    public string GetRelClassName(WeaverNodeSchema pNode, WeaverRelSchema pRel) {
		return pRel.FromNode.Name + pRel.Name + pRel.ToNode.Name;
    }


	public string GetRelPropName(WeaverNodeSchema pNode, WeaverRelSchema pRel) {
		bool isOut = (pRel.FromNode == pNode);
		bool isMany = false;

		if ( isOut ) {
			isMany = (
				pRel.FromNodeConn == WeaverRelConn.OutToOneOrMore ||
				pRel.FromNodeConn == WeaverRelConn.OutToZeroOrMore
			);
		}
		else {
			isMany = (
				pRel.ToNodeConn == WeaverRelConn.InFromOneOrMore ||
				pRel.ToNodeConn == WeaverRelConn.InFromZeroOrMore
			);
		}

		var fromNode = (isOut ? "" : pRel.FromNode.Name+(isMany ? "s" : ""));
		var toNode = (!isOut ? "" : pRel.ToNode.Name+(isMany ? "s" : ""));
		return (isOut ? "Out" : "In") + fromNode + pRel.Name + toNode;
    }


	public string GetRelConn(WeaverNodeSchema pNode, WeaverRelSchema pRel) {
		bool isFrom = (pRel.FromNode == pNode);
		return (isFrom ? pRel.FromNodeConn : pRel.ToNodeConn)+"";
    }

#>