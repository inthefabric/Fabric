<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Schemas\bin\Debug\Fabric.Domain.Schemas.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Fabric.Domain.Schemas.Vertices" #>
<#@ import namespace="Fabric.Domain.Schemas.Utils" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.Domain;

namespace Fabric.Api.Objects.Conversions {

	/*================================================================================================*/
	public static partial class DomainToApi {


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static void FromElement(FabElement pApi, Vertex pDomain) {
			//do nothing...
		}
<#
IList<IVertexSchema> vertexSchemas = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in vertexSchemas ) { 
	if ( v.IsSpecInternal(v.GetAccess) ) {
		continue;
	}

	IVertexSchema vp = SchemaUtil.GetVertexParent(v);
	string baseName = (vp == null ? "FabElement" : vp.Names.Api);

	IList<ApiProperty> props = SchemaUtil.GetVertexApiProperties(v, false);
	IDictionary<string, IList<ApiProperty>> subMap = SchemaUtil.GetVertexApiPropertySubMap(v);
	IDictionary<ApiProperty, PropertyMapping> propMap = SchemaUtil.GetVertexApiPropertyMaps(v);
	bool custom = false;
#>


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static <#= v.Names.Api #> From<#= v.Names.Domain #>(<#= v.Names.Domain #> pDomain) {
			var api = new <#= v.Names.Api #>();
			From<#= v.Names.Domain #>(api, pDomain);
			return api;
		}

		/*--------------------------------------------------------------------------------------------*/
		public static void From<#= v.Names.Domain #>(<#= v.Names.Api #> pApi, <#= v.Names.Domain #> pDomain) {
			From<#= baseName.Substring(3) #>(pApi, pDomain);
<#
	foreach ( string sub in subMap.Keys ) {
#>
			pApi.<#= sub.Substring(3) #> = new <#= sub #>();
<#
	} // end custom condition

	foreach ( ApiProperty ap in props ) {
		if ( ap.IsSpecInternal(ap.GetAccess) ) {
			continue;
		}

		string sub = (ap.SubObjectOf == null ? "" : ap.SubObjectOf.Substring(3)+".");
		PropertyMapping pm = propMap[ap];

		if ( pm.Custom == CustomDir.Both || pm.Custom == CustomDir.DomainToApi ) {
			custom = true;
#>
			//Custom: <#= (pm.DomainToApiNote ?? "") #>
			//pApi.<#= sub #><#= ap.Name #> <== pDomain.<#= pm.Domain.Name #>  (requires custom)
<#
			continue;
		}

		string end = (pm.Domain.DataTypeNameHasQuestionMark() ? ".GetValueOrDefault()" : "");
#>
			pApi.<#= sub #><#= ap.Name #> = pDomain.<#= pm.Domain.Name #><#= end #>;
<#
	} // end property loop

	if ( custom ) {
#>
			From<#= v.Names.Domain #>Custom(pApi, pDomain);
<#
	} // end custom condition
#>
		}
<#
} // end vertex loop
#>

	}

}