<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".css" #> 
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Weaver" #>
<#@ import namespace="Weaver.Schema" #>
/*GENERATED CODE
Changes made to this source file will be overwritten
Generated on <#= DateTime.Now.ToString() #> */

/* NODES */

<#
var schema = new Schema();
var rand = new Random(999);
var relTypeMap = new Dictionary<string,string>();

foreach ( WeaverNodeSchema node in schema.Nodes ) {
	if ( node.IsAbstract ) { continue; }
#>
.node<#= node.Name #> { fill: <#= NewColor(rand, 0.9) #>; }
<#
}
#>

/* RELS */

<#
foreach ( WeaverRelSchema rel in schema.Rels ) {
	string col = null;

	if ( relTypeMap.ContainsKey(rel.Name) ) {
		continue;
		//col = relTypeMap[rel.Name];
	}
	else {
		col = NewColor(rand, 0.2);
		relTypeMap.Add(rel.Name, col);
	}
	
#>
.link<#= /*rel.FromNode.Name +*/ rel.Name /*+ rel.ToNode.Name*/ #> { stroke: <#= col #>; }
<#
}
#>

<#+ 
public string NewColor(Random pRand, double pAlpha) {
	return "rgba("+
		(pRand.Next()%255)+","+
		(pRand.Next()%255)+","+
		(pRand.Next()%255)+","+
		pAlpha+")";
}
#>