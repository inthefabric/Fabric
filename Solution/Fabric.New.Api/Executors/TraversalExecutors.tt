<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using System;
using System.Collections.Generic;
using System.Linq;
using Fabric.New.Api.Interfaces;
using Fabric.New.Api.Objects;
using Fabric.New.Api.Objects.Traversal;
using Fabric.New.Operations.Traversal;

namespace Fabric.New.Api.Executors {

	/*================================================================================================*/
	public static class TraversalExecutors {

		public static readonly ApiEntry[] ApiEntries = new [] {
			ApiEntry.Get("/Trav/{*}", TravResp, typeof(FabResponse<FabObject>)),
<#
IList<IVertexSchema> allVerts = SchemaUtil.GetVertexSchemas();
var verts = new List<IVertexSchema>();

foreach ( IVertexSchema v in allVerts ) {
	if ( v.GetAccess == Access.All ) {
		verts.Add(v);
	}
}

foreach ( IVertexSchema v in verts ) {
#>
			ApiEntry.Get("/Trav/<#= v.Names.DomainPlural #>", TravResp, typeof(FabResponse<FabTrav<#= v.Names.Domain #>Root>)),
<#
} //end vertex loop
#>
		};
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static IApiResponse TravResp(IApiRequest pApiReq) {
			FabTravStep[] steps = null;
			
			Func<IList<FabElement>> getResp = (() => {
				string path = pApiReq.Path.Substring(6); //remove "/Trav/"
				var op = new TraversalOperation();
				steps = op.GetResultSteps().ToArray();
				return op.Execute(pApiReq.OpCtx, path);
			});

			var exec = new FabResponseExecutor<FabElement>(pApiReq, getResp);
			exec.NewFabResponse = (() => new FabTravResponse<FabElement> { Steps = steps });
			return exec.Execute();
		}
		
	}

}