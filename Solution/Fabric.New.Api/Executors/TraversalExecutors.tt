<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.New.Api.Interfaces;
using Fabric.New.Api.Objects;
using Fabric.New.Api.Objects.Traversal;

namespace Fabric.New.Api.Executors {

	/*================================================================================================*/
	public static class TraversalExecutors {

		public static readonly ApiEntry[] ApiEntries = new [] {
			ApiEntry.Get("/Trav/{*}", TravResp, typeof(FabResponse<FabObject>)),
<#
IList<IVertexSchema> allVerts = SchemaUtil.GetVertexSchemas();
var verts = new List<IVertexSchema>();

foreach ( IVertexSchema v in allVerts ) {
	if ( v.GetAccess == Access.All ) {
		verts.Add(v);
	}
}

foreach ( IVertexSchema v in verts ) {
#>
			ApiEntry.Get("/Trav/<#= v.Names.DomainPlural #>", TravResp, typeof(FabResponse<FabTrav<#= v.Names.Domain #>Root>)),
<#
} //end vertex loop
#>
		};
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static IApiResponse TravResp(IApiRequest pApiReq) {
			return new TraversalExecutor(pApiReq).Execute();
		}
		
	}

}