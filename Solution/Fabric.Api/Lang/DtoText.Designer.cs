//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fabric.Api.Lang {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DtoText {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DtoText() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Fabric.Api.Lang.DtoText", typeof(DtoText).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registered project, application, or business that has direct access to the Fabric API.
        ///
        ///An !App&apos;s primary purpose is to facilitate User interaction with Fabric. To accomplish this, an !App typically creates an interface for its Users. This interface hides the complex details of the Fabric API, and instead provides intuitive features like custom inputs, searches, summaries, and visualizations. 
        ///
        ///When a User becomes a Member of an !App, they are granting that !App permission to perform various actions o [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string App {
            get {
                return ResourceManager.GetString("App", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects an App to all of its Members..
        /// </summary>
        internal static string AppDefinesMember {
            get {
                return ResourceManager.GetString("AppDefinesMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object which is able to (via Factor connections) accumulate meaning, context, user sentiment, and relationships.  !Artifacts and Factors are the central components of the Fabric architecture.
        ///
        ///There are no restrictions on what an !Artifact can represent.  Fabric encourages the generous use of Factors to identify and describe each new !Artifact. Ideally, the Factor connections will distinguish an !Artifact from all others..
        /// </summary>
        internal static string Artifact {
            get {
                return ResourceManager.GetString("Artifact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects an Artifact to all of the Factors using it as the primary Artifact..
        /// </summary>
        internal static string ArtifactUsedAsPrimaryByFactor {
            get {
                return ResourceManager.GetString("ArtifactUsedAsPrimaryByFactor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects an Artifact to all of the Factors using it as the related Artifact..
        /// </summary>
        internal static string ArtifactUsedAsRelatedByFactor {
            get {
                return ResourceManager.GetString("ArtifactUsedAsRelatedByFactor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents any item (real, imaginary, virtual, conceptual, or otherwise) that an App or User can define and/or use to generate meaning. !Classes and Instances are closely related, and are the primary method for generating new Artifacts.
        ///
        ///A !Class represents a particular group, type, set, or category of items. Each !Class must uniquely identifiable (via name and disambiguation) amongst all other !Classes.
        ///[(EX|Ellie&apos;s Class Example|Ellie is building an App for dog lovers, but there are not yet animal-rela [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Class {
            get {
                return ResourceManager.GetString("Class", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for the creation of Artifacts..
        /// </summary>
        internal static string CreateFabArtifact {
            get {
                return ResourceManager.GetString("CreateFabArtifact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Class..
        /// </summary>
        internal static string CreateFabClass {
            get {
                return ResourceManager.GetString("CreateFabClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Descriptor..
        /// </summary>
        internal static string CreateFabDescriptor {
            get {
                return ResourceManager.GetString("CreateFabDescriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Director..
        /// </summary>
        internal static string CreateFabDirector {
            get {
                return ResourceManager.GetString("CreateFabDirector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for the creation of Elements..
        /// </summary>
        internal static string CreateFabElement {
            get {
                return ResourceManager.GetString("CreateFabElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Eventor..
        /// </summary>
        internal static string CreateFabEventor {
            get {
                return ResourceManager.GetString("CreateFabEventor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Factor..
        /// </summary>
        internal static string CreateFabFactor {
            get {
                return ResourceManager.GetString("CreateFabFactor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Identor..
        /// </summary>
        internal static string CreateFabIdentor {
            get {
                return ResourceManager.GetString("CreateFabIdentor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Instance..
        /// </summary>
        internal static string CreateFabInstance {
            get {
                return ResourceManager.GetString("CreateFabInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Locator..
        /// </summary>
        internal static string CreateFabLocator {
            get {
                return ResourceManager.GetString("CreateFabLocator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Member..
        /// </summary>
        internal static string CreateFabMember {
            get {
                return ResourceManager.GetString("CreateFabMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for the creation of Objects..
        /// </summary>
        internal static string CreateFabObject {
            get {
                return ResourceManager.GetString("CreateFabObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Url..
        /// </summary>
        internal static string CreateFabUrl {
            get {
                return ResourceManager.GetString("CreateFabUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the data needed to create a new Vector..
        /// </summary>
        internal static string CreateFabVector {
            get {
                return ResourceManager.GetString("CreateFabVector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for the creation of Vertices..
        /// </summary>
        internal static string CreateFabVertex {
            get {
                return ResourceManager.GetString("CreateFabVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Factor component that describes and refines the relationship between the Factor&apos;s two Artifacts. !Descriptors are the only required Factor component.
        ///
        ///First, the DescriptorType provides semantic meaning to the relationship, such as: a A &quot;is a&quot; B, or C &quot;sounds like&quot; D. Since this relationship is directional (flowing _from_ the Factor&apos;s primary Artifact and _to_ the related Artifact), the DescriptorType must coordinate correctly with the relationship&apos;s direction.
        ///[(EX|Relationship Example|_Objective:_
        ///D [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Descriptor {
            get {
                return ResourceManager.GetString("Descriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Factor component that creates a directional, action-based flow between the Factor&apos;s two Artifacts.
        ///
        ///The nature of a !Director&apos;s pathway depends on its DirectorType. The !Director can  represent a factual, well-defined path, a virtual link, a suggested flow, etc.
        ///
        ///A !Director specifies a DirectorAction for each of the Factor&apos;s Artifacts, which give additional meaning to the !Director&apos;s pathway. The primary action is meant to be performed on the primary Artifact before the pathway begins. The related ac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Director {
            get {
                return ResourceManager.GetString("Director", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An item (Vertex or Link) in Fabric&apos;s graph structure..
        /// </summary>
        internal static string Element {
            get {
                return ResourceManager.GetString("Element", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a fault or error occurs, a !FabError is included in the response data. The information it provides should help determine what caused the issue for the given request..
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Factor component that applies the concept of time to a particular Factor.
        ///
        ///An !Eventor places a Factor at a specific point in time and describes why it is significant to the Factor. The EventorType provides this significance, establishing that this particular point in time is when the Factor started, occurred, is expected, etc.
        ///
        ///Each !Eventor represents one particular point in time, however, the precision of that point in time can vary. The optional time values allow a point in time to provide a level [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Eventor {
            get {
                return ResourceManager.GetString("Eventor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a specific piece of information, knowledge, or opinion about a pair of Artifacts. !Factors and Artifacts are the central components of the Fabric architecture.
        ///
        ///A !Factor forms a directional relationship from its primary Artifact to its related Artifact. It contains one or more components, called !Factor components. Each Element has a specific ability to refine, describe, and/or supplement this Artifact relationship in a meaningful way.
        ///
        ///There are six !Factor components: Descriptor, Director, E [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Factor {
            get {
                return ResourceManager.GetString("Factor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for all Fault objects..
        /// </summary>
        internal static string Fault {
            get {
                return ResourceManager.GetString("Fault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The complete collection of Fabric API services..
        /// </summary>
        internal static string Home {
            get {
                return ResourceManager.GetString("Home", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Factor component that applies a name or identifier to a particular Factor.
        ///
        ///An !Identor attaches a text-based value to a Factor. This value can represent a a full name, a nickname, a globally-unique identifier, a reference key to some other system, etc.
        ///
        ///The IdentorType hints at the purpose or intent of the !Identor. A &quot;Text&quot; IdentorType is typically meant to provide enhanced search capabilities (like finding a person by an alternate name) or some other organizational use.  A &quot;Key&quot; IdentorType is typi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Identor {
            get {
                return ResourceManager.GetString("Identor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents any item (real, imaginary, virtual, conceptual, or otherwise) that an App or User can define and/or use to generate meaning. Classes and !Instances are closely related, and are the primary method for generating new Artifacts.
        ///
        ///An !Instance represents a singular, unique item. It may have a specific name, however, the name is not required to be unique. Instead, the creator should apply Factors to make the Instance as specific and meaningful as possible.
        ///[(EX|Ellie&apos;s Instance Example|_Continued f [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Instance {
            get {
                return ResourceManager.GetString("Instance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection between one Vertex and another..
        /// </summary>
        internal static string Link {
            get {
                return ResourceManager.GetString("Link", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Factor component that positions a Factor using geographic or relative coordinates.
        ///
        ///A !Locator attaches a three-dimensional coordinate to a Factor. The LocatorType defines the spatial context of the coordinate, supporting both geographic and relative positioning.
        ///
        ///Geographic coordinates represent a position on a sphere, like Earth.  They use X for longitude, Y for latitude, and Z for elevation (in metres above sea level). Use zero for elevation if it is not known or specified.
        ///[(EX|Geographic Example [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Locator {
            get {
                return ResourceManager.GetString("Locator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An association between a User and an App. The App administrator(s) can grant various access privileges to a !Member by creating a MemberTypeAssign that uses a different MemberType.
        ///
        ///Every item added to Fabric is associated with a particular !Member. This enables Fabric to determine which App or User is responsible for any particular item, enforce applicable access rights, analyze the data for a particular App and/or User, etc..
        /// </summary>
        internal static string Member {
            get {
                return ResourceManager.GetString("Member", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects a Member to all the Artifacts it has created..
        /// </summary>
        internal static string MemberCreatesArtifact {
            get {
                return ResourceManager.GetString("MemberCreatesArtifact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects a Member to all the Factors it has created..
        /// </summary>
        internal static string MemberCreatesFactor {
            get {
                return ResourceManager.GetString("MemberCreatesFactor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the current Fabric system time. Fabric uses the UTC timezone for all dates, times, and timestamps..
        /// </summary>
        internal static string MetaTime {
            get {
                return ResourceManager.GetString("MetaTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the current Fabric version information. Fabric uses semantic versioning..
        /// </summary>
        internal static string MetaVersion {
            get {
                return ResourceManager.GetString("MetaVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides an OAuth access token and other related information. Every Fabric API request requires an access token. To include an OAuth access token with a FabricAPI request, add an &quot;Authorization&quot; header to the HTTP request with a value of &quot;Bearer=[your OAuth access code here]&quot;..
        /// </summary>
        internal static string OauthAccess {
            get {
                return ResourceManager.GetString("OauthAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To comply with the OAuth 2.0 specification, all Fabric OAuth requests return a FabOauthError (instead of FabFault or FabError) when errors occur..
        /// </summary>
        internal static string OauthError {
            get {
                return ResourceManager.GetString("OauthError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This object is unique -- the API never returns this object directly. Instead, the properties shown below are included as query-string parameters for a redirect URI. This URI is provided by an App, and the App is responsible for accepting (and reacting to) the incoming redirect.
        ///
        ///This redirect is used in one particular scenario: the [[OAuth login process|Oper|Oauth.Login]]. After the user completes this process, Fabric performs a redirect with success or failure information.  The success redirect includes  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OauthLogin {
            get {
                return ResourceManager.GetString("OauthLogin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of an OAuth logout..
        /// </summary>
        internal static string OauthLogout {
            get {
                return ResourceManager.GetString("OauthLogout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for all !Objects returned by Fabric&apos;s services..
        /// </summary>
        internal static string Object {
            get {
                return ResourceManager.GetString("Object", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response wrapper for most API requests. It contains a data payload, error information, and/or other metadata..
        /// </summary>
        internal static string Response {
            get {
                return ResourceManager.GetString("Response", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A collection of ServiceOperations which all share a similar purpose..
        /// </summary>
        internal static string Service {
            get {
                return ResourceManager.GetString("Service", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A task, query, or operation that belongs to a Service..
        /// </summary>
        internal static string ServiceOperation {
            get {
                return ResourceManager.GetString("ServiceOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides an App traversal entry point..
        /// </summary>
        internal static string TravAppRoot {
            get {
                return ResourceManager.GetString("TravAppRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides an Artifact traversal entry point..
        /// </summary>
        internal static string TravArtifactRoot {
            get {
                return ResourceManager.GetString("TravArtifactRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a Class traversal entry point..
        /// </summary>
        internal static string TravClassRoot {
            get {
                return ResourceManager.GetString("TravClassRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response wrapper for traversal API requests..
        /// </summary>
        internal static string TraversalResponse {
            get {
                return ResourceManager.GetString("TraversalResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a Factor traversal entry point..
        /// </summary>
        internal static string TravFactorRoot {
            get {
                return ResourceManager.GetString("TravFactorRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides an Instance traversal entry point..
        /// </summary>
        internal static string TravInstanceRoot {
            get {
                return ResourceManager.GetString("TravInstanceRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a Member traversal entry point..
        /// </summary>
        internal static string TravMemberRoot {
            get {
                return ResourceManager.GetString("TravMemberRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Represents the root, or starting point, of all [[Traversal Service|Serv|Traversal]] queries. The !Root provides traversal links to all other available objects..
        /// </summary>
        internal static string TravRoot {
            get {
                return ResourceManager.GetString("TravRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides information about an available traversal step..
        /// </summary>
        internal static string TravStep {
            get {
                return ResourceManager.GetString("TravStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for all traversal entry points..
        /// </summary>
        internal static string TravTypedRoot {
            get {
                return ResourceManager.GetString("TravTypedRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a Url traversal entry point..
        /// </summary>
        internal static string TravUrlRoot {
            get {
                return ResourceManager.GetString("TravUrlRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a User traversal entry point..
        /// </summary>
        internal static string TravUserRoot {
            get {
                return ResourceManager.GetString("TravUserRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a Vertex traversal entry point..
        /// </summary>
        internal static string TravVertexRoot {
            get {
                return ResourceManager.GetString("TravVertexRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A hyperlink or path (uniform resource locator) to some web page, a file, or some other type of content.
        ///
        ///While a !Url is a type of Artifact, it should be used with certain constraints. Consider an scenario where a !Url leads to web page with a news article and a photo. The proper prodedure is to create a new Instance for both the news article and photo. With this method:
        ///- The news article and photo Instances can receive Factors independently.
        ///- The !Url should only receive Factors related to the actual [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Url {
            get {
                return ResourceManager.GetString("Url", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registered Fabric account that has indirect access (via Apps) to the Fabric API. A !User can become a Member of an App, and then use the App&apos;s interface to interact with Fabric. An App&apos;s interface hides the complex details of the Fabric API, and instead provides intuitive features like custom inputs, searches, summaries, and visualizations. 
        ///
        ///!Users control their private account data and preferences using the Fabric website.
        ///
        ///Every item added to Fabric is associated with (via Member) a !User and and a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string User {
            get {
                return ResourceManager.GetString("User", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects a User to all of its Members..
        /// </summary>
        internal static string UserDefinesMember {
            get {
                return ResourceManager.GetString("UserDefinesMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Factor component that applies a meaningful numeric axis and value to a particular Factor.
        ///
        ///A !Vector attaches a numeric value to a Factor, using an arbitrary Artifact to define its &quot;axis&quot;. This axis depends entiedgey upon the !Vector&apos;s purpose. For example, a factual !Vector might use an Artifact like &quot;Height&quot; or &quot;Shutter Speed&quot;. A !Vector that provides an opinion might use an Artifact like &quot;Quality&quot; or &quot;Excitement&quot;. While the choice of an axis Artififact is not restricted, it can be beneficial to use A [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Vector {
            get {
                return ResourceManager.GetString("Vector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class for all vertices present in the Fabric &quot;graph&quot;.  Only Vertices are present and traversable via the [[Traversal Service|Serv|Traversal]]..
        /// </summary>
        internal static string Vertex {
            get {
                return ResourceManager.GetString("Vertex", resourceCulture);
            }
        }
    }
}
