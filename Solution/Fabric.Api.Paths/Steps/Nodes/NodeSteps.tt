<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Infrastructure\bin\Debug\Fabric.Infrastructure.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Infrastructure.Domain" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;
using System.Linq;
using Fabric.Api.Dto;

namespace Fabric.Api.Paths.Steps.Nodes {
	
<#
IList<string> nodeNames = SchemaHelper.GetNodes();
var intMap = new Dictionary<string,bool>();

foreach ( string name in nodeNames ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	IList<SchemaHelperNodeRel> nodeRels = hn.GetRels(true);

	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( intMap.ContainsKey(hr.RelPropName) ) { continue; }
		intMap.Add(hr.RelPropName, true);
#>
	/*================================================================================================*/
	public interface I<#= hr.RelPropName #> {
		<#= hr.TargetNodeType #>Step <#= hr.RelPropName #> { get; }
	}

<#
	} //end nodeRels loop
} //end nodes loop

foreach ( string name in nodeNames ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverNodeSchema node = hn.NodeSchema;
	if ( node.IsAbstract || node.IsInternal ) { continue; }

	IList<SchemaHelperNodeRel> nodeRels = hn.GetRels(true);
	string interfaces = "";
	string steps = "";

	if ( node.Name == "Root" ) {
		interfaces += "IFinalStep";
	}

	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		interfaces += (interfaces == "" ? "" : ", ")+"I"+hr.RelPropName;
		if ( node.Name != "Root" && hr.FromNodeName == "Root" ) { continue; }
		steps += (steps == "" ? "" : ", ")+"\"/"+hr.RelPropName+"\"";
	}
	
	string typeIdIsLong = "false";
	
	foreach ( WeaverPropSchema prop in node.Props ) {
		if ( prop.Name != node.Name+"Id" ) { continue; }
		typeIdIsLong = (prop.Type == typeof(long) ? "true" : "false");
		break;
	}
#>
	/*================================================================================================*/
	public partial class <#= node.Name #>Step : NodeStep<<#= "Fab"+node.Name #>>, <#= interfaces #> {
	
		private static readonly List<string> AvailNodeLinks = new List<string> {
			<#= steps #>
		};


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= node.Name #>Step(Path pPath) : base(pPath) {
<#
	if ( node.Name == "Root" ) {
#>
			if ( pPath.Segments.Count == 0 ) {
				Path.AddSegment(this, "g.v(0)");
			}

<#
	}
#>
			ConstructorHook();
		}
		
		/*--------------------------------------------------------------------------------------------*/
		partial void ConstructorHook();

<#
	if ( node.Name == "Root" ) {
#>
		/*--------------------------------------------------------------------------------------------*/
		public int Count { get { return 1; } }
		public long Index { get { return 0; } }

<#
	}
#>
		/*--------------------------------------------------------------------------------------------*/
		public override string TypeIdName { get { return "<#= node.Name #>Id"; } }
		public override bool TypeIdIsLong { get { return <#= typeIdIsLong #>; } }
		
		/*--------------------------------------------------------------------------------------------*/
		public override List<string> AvailableLinks {
			get { return base.AvailableLinks.Concat(AvailNodeLinks).ToList(); }
		}
		
		/*--------------------------------------------------------------------------------------------*/
		protected override IStep GetLink(StepData pData) {
			switch ( pData.Command ) {
<#
	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( node.Name != "Root" && hr.FromNodeName == "Root" ) { continue; }
		var propName = hr.RelPropName;
#>
				case "<#= propName.ToLower() #>": return <#= propName #>;
<#
	} //end nodeRels loop
#>
			}

			return base.GetLink(pData);
		}


		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		var propType = hr.TargetNodeType+"Step";
		var script = (hr.IsOutgoing ? "outE" : "inE")+"('"+hr.RelName+"')."+
			(hr.IsOutgoing ? "inV" : "outV");
#>
		/*--------------------------------------------------------------------------------------------*/
		public <#= propType #> <#= hr.RelPropName #> {
			get {
				var step = new <#= propType #>(Path);
				Path.AddSegment(step, "<#= script #>");
				return step;
			}
		}

<#
	} //end nodeRels loop
#>
	}

<#
} //end nodes loop
#>
}