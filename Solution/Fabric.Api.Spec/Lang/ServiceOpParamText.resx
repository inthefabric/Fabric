<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Modify_AddApp_Name" xml:space="preserve">
    <value>The name of the new App.</value>
  </data>
  <data name="Modify_AddApp_UserId" xml:space="preserve">
    <value>Identifies the User that is creating the App. This User will receive the App's 'DataProvider' Member.</value>
  </data>
  <data name="Modify_AddClass_Disamb" xml:space="preserve">
    <value>The disambiguation text for the new Class.  When provided, the disambiguation text permits the use of a non-unique name.</value>
  </data>
  <data name="Modify_AddClass_Name" xml:space="preserve">
    <value>The name of the new Class. It must be unique on its own, or be unique in combination with the disambiguation text.</value>
  </data>
  <data name="Modify_AddClass_Note" xml:space="preserve">
    <value>A brief description of the new Class. It can be useful for helping others understand the creator's intended purpose or meaning.</value>
  </data>
  <data name="Modify_AddFactor_FactorAssertionId" xml:space="preserve">
    <value>Identifies the FactorAssertion for the new Factor. In cases where the assertion type is unclear or not known, please use the 'Undefined' FactorAssertion.</value>
  </data>
  <data name="Modify_AddFactor_IsDefining" xml:space="preserve">
    <value>The IsDefining value for the new Factor.</value>
  </data>
  <data name="Modify_AddFactor_Note" xml:space="preserve">
    <value>A sentence or short paragraph describing (in a human-readable format) the intended meaning of the new Factor. A descriptive note can help others understand the creator's intended purpose or meaning for the Factor.</value>
  </data>
  <data name="Modify_AddFactor_PrimaryArtifactId" xml:space="preserve">
    <value>Identifies the primary Artifact for the new Factor.</value>
  </data>
  <data name="Modify_AddFactor_RelatedArtifactId" xml:space="preserve">
    <value>Identifies the related Artifact for the new Factor. The related Artifact cannot be the same as the primary Artifact.</value>
  </data>
  <data name="Modify_AddInstance_Disamb" xml:space="preserve">
    <value>The disambiguation text for the new Instance. When provided, the disambiguation text permits the use of a non-unique name.</value>
  </data>
  <data name="Modify_AddInstance_Name" xml:space="preserve">
    <value>The name of the new Instance. It does not need to be unique.</value>
  </data>
  <data name="Modify_AddInstance_Note" xml:space="preserve">
    <value>A brief description of the new Instance.  It can be useful for helping others understand the creator's intended purpose or meaning.</value>
  </data>
  <data name="Modify_AddUrl_AbsoluteUrl" xml:space="preserve">
    <value>The complete absolute URL for new Url object. It must include the URL's protocol (such as 'http://').</value>
  </data>
  <data name="Modify_AddUrl_Name" xml:space="preserve">
    <value>The name of the new Url.</value>
  </data>
  <data name="Modify_AddUser_Email" xml:space="preserve">
    <value>The email address for the new User.</value>
  </data>
  <data name="Modify_AddUser_Name" xml:space="preserve">
    <value>The username for the new User.</value>
  </data>
  <data name="Modify_AddUser_Password" xml:space="preserve">
    <value>The password for the new User.</value>
  </data>
  <data name="Modify_AttachDescriptorToFactor_DescriptorTypeId" xml:space="preserve">
    <value>Identifies the DescriptorType for the new Descriptor.</value>
  </data>
  <data name="Modify_AttachDescriptorToFactor_DescriptorTypeRefineId" xml:space="preserve">
    <value>Identifies the Artifact that refines the new Descriptor's DescriptorType.</value>
  </data>
  <data name="Modify_AttachDescriptorToFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor that will receive the Descriptor attachment.</value>
  </data>
  <data name="Modify_AttachDescriptorToFactor_PrimaryArtifactRefineId" xml:space="preserve">
    <value>Identifies the Artifact that refines the Factor's primary Artifact.</value>
  </data>
  <data name="Modify_AttachDescriptorToFactor_RelatedArtifactRefineId" xml:space="preserve">
    <value>Identifies the Artifact that refines the Factor's related Artifact.</value>
  </data>
  <data name="Modify_AttachDirectorToFactor_DirectorTypeId" xml:space="preserve">
    <value>Identifies the DirectorType for the new Director.</value>
  </data>
  <data name="Modify_AttachDirectorToFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor that will receive the Director attachment.</value>
  </data>
  <data name="Modify_AttachDirectorToFactor_PrimaryDirectorActionId" xml:space="preserve">
    <value>Identifies the DirectorAction associated with the Factor's primary Artifact.</value>
  </data>
  <data name="Modify_AttachDirectorToFactor_RelatedDirectorActionId" xml:space="preserve">
    <value>Identifies the DirectorAction associated with the Factor's related Artifact.</value>
  </data>
  <data name="Modify_AttachEventorToFactor_DateTime" xml:space="preserve">
    <value>The date and time for the new Eventor. This value must be accurate to the level of precision defined by the specified EventorPrecision. Set unused month/day values to 1, and unused hour/minute values (and beyond) to 0.</value>
  </data>
  <data name="Modify_AttachEventorToFactor_EventorPrecisionId" xml:space="preserve">
    <value>Identifies the EventorPrecision for the new Eventor.</value>
  </data>
  <data name="Modify_AttachEventorToFactor_EventorTypeId" xml:space="preserve">
    <value>Identifies the EventorType for the new Eventor.</value>
  </data>
  <data name="Modify_AttachEventorToFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor that will receive the Eventor attachment.</value>
  </data>
  <data name="Modify_AttachIdentorToFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor that will receive the Identor attachment.</value>
  </data>
  <data name="Modify_AttachIdentorToFactor_IdentorTypeId" xml:space="preserve">
    <value>Identifies the IdentorType for the new Identor.</value>
  </data>
  <data name="Modify_AttachIdentorToFactor_Value" xml:space="preserve">
    <value>The text-based value for the new Identor.</value>
  </data>
  <data name="Modify_AttachLocatorToFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor that will receive the Locator attachment.</value>
  </data>
  <data name="Modify_AttachLocatorToFactor_LocatorTypeId" xml:space="preserve">
    <value>Identifies the LocatorType for the new Locator.</value>
  </data>
  <data name="Modify_AttachLocatorToFactor_ValueX" xml:space="preserve">
    <value>The X value for the new Locator.</value>
  </data>
  <data name="Modify_AttachLocatorToFactor_ValueY" xml:space="preserve">
    <value>The Y value for the new Locator.</value>
  </data>
  <data name="Modify_AttachLocatorToFactor_ValueZ" xml:space="preserve">
    <value>The Z value for the new Locator.</value>
  </data>
  <data name="Modify_AttachVectorToFactor_AxisArtifactId" xml:space="preserve">
    <value>The Artifact which provides meaning for the new Vector.</value>
  </data>
  <data name="Modify_AttachVectorToFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor that will receive the Vector attachment.</value>
  </data>
  <data name="Modify_AttachVectorToFactor_Value" xml:space="preserve">
    <value>The value for the new Vector. This value must be within the range specified by the VectorType. Decimal values are not supported; if additional precision is required, use a VectorUnitPrefix such as Milli or Micro.</value>
  </data>
  <data name="Modify_AttachVectorToFactor_VectorTypeId" xml:space="preserve">
    <value>Identifies the VectorType for the new Vector.</value>
  </data>
  <data name="Modify_AttachVectorToFactor_VectorUnitId" xml:space="preserve">
    <value>Identifies the VectorUnit for the new Vector.</value>
  </data>
  <data name="Modify_AttachVectorToFactor_VectorUnitPrefixId" xml:space="preserve">
    <value>Identifies the VectorUnitPrefix for the new Vector.</value>
  </data>
  <data name="Modify_CompleteFactor_FactorId" xml:space="preserve">
    <value>Identifies the incomplete Factor to be completed.</value>
  </data>
  <data name="Modify_CompleteFactor_IsCompleted" xml:space="preserve">
    <value>The IsCompleted value must be 'true'.</value>
  </data>
  <data name="Modify_DeleteFactor_FactorId" xml:space="preserve">
    <value>Identifies the Factor to be deleted.</value>
  </data>
  <data name="Modify_DeleteFactor_IsDeleted" xml:space="preserve">
    <value>The IsDeleted value must be 'true'.</value>
  </data>
  <data name="Oauth_AccessToken_ClientId" xml:space="preserve">
    <value>The App ID value (an integer) for the App making the request. This parameter is only used by the '[[Client Credentials|Func|Oauth.AccessTokenClientCredentials]]' and '[[Client Data Provider|Func|Oauth.AccessTokenClientDataProv]]' flows.</value>
  </data>
  <data name="Oauth_AccessToken_Code" xml:space="preserve">
    <value>The authorization code obtained after a successful OAuth entry process. This parameter is only used by the '[[Authorization Code|Func|Oauth.AccessTokenAuthCode]]' flow.</value>
  </data>
  <data name="Oauth_AccessToken_DataProvUserId" xml:space="preserve">
    <value>The User ID value (an integer) for the Data Provider of the App making the request. Upon App creation, Fabric creates a special 'Data Provider' User which the App uses for creating items in the Fabric system. This parameter is only used by the '[[Client Data Provider|Func|Oauth.AccessTokenClientDataProv]]' flow.</value>
  </data>
  <data name="Oauth_AccessToken_GrantType" xml:space="preserve">
    <value>Defines the desired access token flow.  The four accepted (case-sensitive) values are '[[authorization_code|Func|Oauth.AccessTokenAuthCode]]', '[[refresh|Func|Oauth.AccessTokenRefresh]]', '[[client_credentials|Func|Oauth.AccessTokenClientCredentials]]', and '[[client_data_provider|Func|Oauth.AccessTokenClientDataProv]]'.</value>
  </data>
  <data name="Oauth_AccessToken_RedirectUri" xml:space="preserve">
    <value>This value must be exactly the same as the redirect URI provided for the OAuth entry process.</value>
  </data>
  <data name="Oauth_AccessToken_Refresh" xml:space="preserve">
    <value>The refresh token obtained after a successful '[[Authorization Code|Func|Oauth.AccessTokenAuthCode]]' access token flow.  A refresh token only applies to User-based OAuth sessions, not for App-based OAuth sessions.  This parameter is only used by the '[[Refresh|Func|Oauth.AccessTokenRefresh]]' flow.</value>
  </data>
  <data name="Oauth_AccessToken_Secret" xml:space="preserve">
    <value>The alpha-numeric Secret for the App making the request. This verifies that the App itself is making the request, and not an imposter.  For this reason, the secret code should not be shared with anyone.</value>
  </data>
  <data name="Oauth_Login_ClientId" xml:space="preserve">
    <value>The ID of the Fabric App making the OAuth Login request.  The access code provided after a successful OAuth process will be associated with this App ID and the authenticated User's ID.</value>
  </data>
  <data name="Oauth_Login_RedirectUri" xml:space="preserve">
    <value>The URL which will receive success/error redirects from the OAuth Login process.  This URL should handle the following query-string parameters: access_code, error, error_description, state.</value>
  </data>
  <data name="Oauth_Login_ResponseType" xml:space="preserve">
    <value>Describes which type of authentication should be performed. For now, this value should always be 'code'. Fabric may accept more response types in the future.</value>
  </data>
  <data name="Oauth_Login_Scope" xml:space="preserve">
    <value>Describes the level of access the App will have to the User's account.  This value is required by the OAuth 2.0 specification, however, Fabric currently ignores it.  All OAuth requests currently receive the same level of access to the User's account.  Fabric may begin using this parameter in the future.</value>
  </data>
  <data name="Oauth_Login_State" xml:space="preserve">
    <value>Provides a security function for a Fabric App.  All success/message redirect responses include a 'state' query-string parameter.  The App should check this value against the state value provided in the initial request.  The two values should always be equal. If the values are not equal, then the redirect did not come from the Fabric OAuth process (or from a different user's process), and should be handled accordingly.</value>
  </data>
  <data name="Oauth_Login_SwitchMode" xml:space="preserve">
    <value>Causes the login process to behave in different ways.  If a value of '1' is provided, the user will see the login page even if they are currently authenticated with Fabric.  This is useful shared-computer scenarios, where the most-recently authenticated user may be different from the user making the current request.</value>
  </data>
  <data name="Oauth_Logout_Token" xml:space="preserve">
    <value>The access token for the desired OAuth session. This request will fail if the token has already been invalidated by a previous logout.</value>
  </data>
</root>