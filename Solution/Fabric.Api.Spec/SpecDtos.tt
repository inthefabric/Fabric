<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Infrastructure\bin\Debug\Fabric.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Api.Dto\bin\Debug\Fabric.Api.Dto.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Infrastructure.Domain" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;

namespace Fabric.Api.Spec {

	/*================================================================================================*/
	public partial class SpecDoc {
	
		/*--------------------------------------------------------------------------------------------*/
		public List<SpecDto> BuildDtoList() {
			var list = new List<SpecDto>();
			
			SpecDto dto;
			SpecProperty p;
			SpecLink l;

<#
IList<string> nodes = SchemaHelper.GetNodes();

foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverNodeSchema node = hn.NodeSchema;
	if ( node.IsInternal ) { continue; }

	string baseNode = "Fab"+(hn.HasParentClass ? node.BaseNode.Name : "Node");
#>
			////

			dto = new SpecDto();
			dto.Name = "Fab<#= node.Name #>";
			dto.Extends = "<#= baseNode #>";
			dto.Description = GetDtoText("<#= node.Name #>");
			dto.Abstract = dto.Description.Substring(0, dto.Description.IndexOf('.')+1);
			list.Add(dto);
	
<#
	IList<SchemaHelperProp> props = hn.GetProps(true);

	foreach ( SchemaHelperProp hp in props ) { 
		WeaverPropSchema prop = hp.PropSchema;
		string propType = hp.TypeName;
		string propName = prop.Name;
		string propItems = "";
		string lineEnd = "\r\n\t\t\t\t";
		
		if ( prop.IsCaseInsensitive != null ) {
			propItems += "p.IsCaseInsensitive = "+prop.IsCaseInsensitive.ToString().ToLower()+";"+lineEnd;
		}

		if ( prop.IsNullable != null ) {
			propItems += "p.IsNullable = "+prop.IsNullable.ToString().ToLower()+";"+lineEnd;
		}

		if ( prop.IsPrimaryKey != null ) {
			propItems += "p.IsPrimaryKey = "+prop.IsPrimaryKey.ToString().ToLower()+";"+lineEnd;
		}

		if ( prop.IsTimestamp != null ) {
			propItems += "p.IsTimestamp = "+prop.IsTimestamp.ToString().ToLower()+";"+lineEnd;
		}
		
		if ( prop.IsUnique != null ) {
			propItems += "p.IsUnique = "+prop.IsUnique.ToString().ToLower()+";"+lineEnd;
		}

		if ( prop.Len != null ) {
			propItems += "p.Len = "+prop.Len+";"+lineEnd;
		}

		if ( prop.LenMax != null ) {
			propItems += "p.LenMax = "+prop.LenMax+";"+lineEnd;
		}

		if ( prop.LenMin != null ) {
			propItems += "p.LenMin = "+prop.LenMin+";"+lineEnd;
		}

		if ( prop.ValidRegex != null ) {
			propItems += "p.ValidRegex = @\""+prop.ValidRegex.Replace("\"", "\"\"")+"\";"+lineEnd;
		}

		string resxDesc = (prop.IsPrimaryKey == true ? "Object_TypeId" : node.Name+"_"+propName);

#>
				p = new SpecProperty();
				p.Name = "<#= propName #>";
				p.Type = "<#= propType #>";
				p.Description = GetDtoPropText("<#= resxDesc #>");
				<#= propItems #>dto.PropertyList.Add(p);

<#
	} //end prop loop
	
	IList<SchemaHelperNodeRel> nodeRels = hn.GetRels(true);

	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( node.Name != "Root" && hr.FromNodeName == "Root" ) { continue; }
#>
					l = new SpecLink();
					l.Name = "<#= hr.RelPropName #>";
					l.IsOutgoing = <#= hr.IsOutgoing.ToString().ToLower() #>;
					l.FromDto = "Fab<#= hr.FromNodeName #>";
					l.FromDtoConn = "<#= hr.RelSchema.FromNodeConn+"" #>";
					l.Verb = "<#= hr.RelName #>";
					l.ToDto = "Fab<#= hr.ToNodeName #>";
					l.ToDtoConn = "<#= hr.RelSchema.ToNodeConn+"" #>";
					dto.LinkList.Add(l);

<#
	} //end rel loop

} // end node loop
#>
			return list;
		}

	}

}