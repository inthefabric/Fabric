<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.0.4.2\lib\Weaver.Core.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;

namespace Fabric.Domain.Meta {

	/*================================================================================================*/
	public static partial class SchemaHelper {
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static IList<string> GetEdgeTypes() {
			return new List<string> {
<#
var schema = new Schema();
var edgeTypeMap = new Dictionary<string, bool>();
var edgeMap = new Dictionary<string, bool>();

foreach ( WeaverEdgeSchema edge in schema.Edges ) {
	if ( edgeTypeMap.ContainsKey(edge.EdgeType) ) { continue; }
	edgeTypeMap.Add(edge.EdgeType, true);
#>
				"<#= edge.EdgeType #>",
<#
} // end edge loop
#>
			};
		}
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static SchemaHelperEdge GetEdge(string pName) {
			var s = SchemaInstance;

			switch ( pName ) {
<#
int ri = 0;

foreach ( WeaverEdgeSchema edge in schema.Edges ) {
	var fromVertex = edge.OutVertex.Name;
	var toVertex = edge.InVertex.Name;
	string edgeClass = fromVertex+edge.Name+toVertex;
		
	if ( edgeMap.ContainsKey(edgeClass) ) { continue; }
	edgeMap.Add(edgeClass, true);
#>
				case "<#= edgeClass #>": return new SchemaHelperEdge(s.Edges[<#= ri #>]);
<#
	++ri;
} //end edge loop
#>
			}

			return null;
		}

		/*--------------------------------------------------------------------------------------------*/
		public static IList<string> GetEdges() {
			return new List<string> {
<#
foreach ( string key in edgeMap.Keys ) {
#>
				"<#= key #>",
<#
} // end keys loop
#>
			};
		}
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static SchemaHelperVertex GetVertex(string pName) {
			var s = SchemaInstance;

			switch ( pName ) {
<#
int ni = 0;

foreach ( WeaverVertexSchema vertex in schema.Vertices ) {
#>
				case "<#= vertex.Name #>": return new SchemaHelperVertex(s.Vertices[<#= ni #>]);
<#
	++ni;
} //end vertex loop
#>
			}

			return null;
		}

		/*--------------------------------------------------------------------------------------------*/
		public static IList<string> GetVertices() {
			return new List<string> {
<#
foreach ( WeaverVertexSchema vertex in schema.Vertices ) {
#>
				"<#= vertex.Name #>",
<#
} // end vertex loop
#>
			};
		}

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static IList<string> GetRootLinks() {
			return new List<string> {
<#
foreach ( WeaverVertexSchema vertex in schema.Vertices ) {
	if ( vertex.IsAbstract || vertex.IsInternal ) {
		continue;
	}
#>
				"<#= vertex.Name #>",
<#
} //end vertex loop
#>
			};
		}

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------* /
		public static IList<WeaverVertexSchema> GetVertexSchemaListForWeaver() {
			if ( WeaverVertexSchemaList == null ) {
				WeaverVertexSchemaList = new List<WeaverVertexSchema> {
<#
foreach ( WeaverVertexSchema vertex in schema.Vertices ) {
#>
					GetVertexSchemaForWeaver("<#= vertex.Name #>"),
<#
} //end vertex loop
#>
				};
			}

			return WeaverVertexSchemaList;
		}*/

	}

}