<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.New.Api.Objects;
using Fabric.New.Api.Operations;

namespace Fabric.New.Api.Executors {

	/*================================================================================================*/
	public static class CreateExecutors {


		////////////////////////////////////////////////////////////////////////////////////////////////
<#
IList<IVertexSchema> vertexSchemas = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in vertexSchemas ) {
	IList<ApiProperty> props = SchemaUtil.GetVertexApiProperties(v, true, true);

	if ( v.GetAccess != Access.All ) {
		continue;
	}
#>
		/*--------------------------------------------------------------------------------------------*/
		public static IApiResponse Create<#= v.Names.Domain #>(IApiRequest pApiReq) {
			var ce = new CreateExecutor<<#= v.Names.Api #>, Create<#= v.Names.Domain #>Operation>(pApiReq);
			return ce.Execute();
		}

<#
} //end vertex loop
#>
	}

}