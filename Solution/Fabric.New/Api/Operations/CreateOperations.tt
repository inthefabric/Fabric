<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Edges" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.New.Api.Objects;
using Fabric.New.Api.Objects.Conversions;
using Fabric.New.Domain;
using Fabric.New.Infrastructure.Weaver;
using Weaver.Core.Query;

namespace Fabric.New.Api.Operations {

	/*================================================================================================*/
	public static class CreateOperations {
<#
IList<IVertexSchema> vertexSchemas = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in vertexSchemas ) {
	IList<IEdgeSchema> edges = SchemaUtil.GetEdgeSchemasForVertex(v, true);
	string createObjName = "Create"+v.Names.Api;
#>
		

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static <#= v.Names.Api #> Create<#= v.Names.Domain #>(object pApiCtx, string pJson) {
			<#= createObjName #> input;
			<#= v.Names.Domain #> dom = CreateOperationsUtil.ConvertInput(
				pJson, ApiToDomain.From<#= createObjName #>, out input);
			
			var txb = new TxBuilder();
			IWeaverVarAlias<<#= v.Names.Domain #>> domVar;
			txb.AddVertex(dom, out domVar);

<#
	foreach ( IEdgeSchema e in edges ) {
		IVertexSchema fv = SchemaUtil.GetVertex(e.FromVertexType);
		IVertexSchema tv = SchemaUtil.GetVertex(e.ToVertexType);
		string idProp = (e.SubObjectOf == null ? "" : e.SubObjectOf.Substring(3)+".")+
			e.GetPropNameApi();
#>
			CreateOperationsUtil.AddEdge<<#= fv.Names.Domain #>, <#= e.GetClassNameDom() #>, <#= tv.Names.Domain #>>(
				txb, pApiCtx, domVar, input.<#= idProp #>);
<#
	} //end edges loop
#>
			//TODO: Add reverse edges
			//TODO: Add edge properties

			return DomainToApi.From<#= v.Names.Domain #>(dom);
		}
<#
} // end verts loop
#>

	}

}