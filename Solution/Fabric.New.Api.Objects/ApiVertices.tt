<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Edges" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.New.Api.Objects.Conversions;
using Fabric.New.Domain;

namespace Fabric.New.Api.Objects {
<#
IList<IVertexSchema> verts = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in verts ) { 
	OutputVertex(v, false);
}

foreach ( IVertexSchema v in verts ) { 
	OutputVertex(v, true);
}
#>

}
<#+
public void OutputVertex(IVertexSchema pVertex, bool pCreateMode) {
	IVertexSchema v = pVertex;
	IVertexSchema vp = SchemaUtil.GetVertexParent(v);

	string apiNamePrefix = (pCreateMode ? "Create" : "");
	string apiName = apiNamePrefix+v.Names.Api;
	string objectName = apiNamePrefix+"FabElement";
	string baseName = (vp == null ? objectName : apiNamePrefix+vp.Names.Api);
	string subBaseName = apiNamePrefix+"FabObject";

	IList<ApiProperty> props = SchemaUtil.GetVertexApiProperties(v, true, pCreateMode);
	IList<IEdgeSchema> edges = SchemaUtil.GetEdgeSchemasForVertex(v, true);
	IDictionary<string, IList<ApiProperty>> subMap = SchemaUtil.GetVertexApiPropertySubMap(v);
	var subEdgeMap = new Dictionary<string, IList<IEdgeSchema>>();

	foreach ( string key in subMap.Keys ) {
		subEdgeMap.Add(key, new List<IEdgeSchema>());
	}
#>		

	/*================================================================================================*/
	public class <#= apiName #> : <#= baseName #> {

<#+
	foreach ( ApiProperty ap in props ) {
		OutputVertexProp(ap, pCreateMode);
	}

	foreach ( IEdgeSchema es in edges ) {
		if ( !pCreateMode ) {
			continue;
		}

		if ( es.SubObjectOf != null ) {
			subEdgeMap[es.SubObjectOf].Add(es);
			continue;
		}

		OutputVertexProp(es, pCreateMode);
	}
	
	foreach ( string sub in subMap.Keys ) {
		//bool isSubNul = v.IsSubObjectNullable(sub);
#>
		public <#= apiNamePrefix+sub #> <#= sub.Substring(3) #> { get; set; }
<#+	
	} // end subMap loop

	if ( pCreateMode ) {
		OutputVertexValidate(v.Names.Api);
	}
	else {
		OutputVertexFill(v);
	}
#>

	}
<#+
	foreach ( string sub in subMap.Keys ) {
#>


	/*================================================================================================*/
	public class <#= apiNamePrefix+sub #> : <#= subBaseName #> {

<#+
	props = subMap[sub];
	edges = subEdgeMap[sub];

	foreach ( ApiProperty ap in props ) {
		OutputVertexProp(ap, pCreateMode);
	}

	foreach ( IEdgeSchema es in edges ) {
		OutputVertexProp(es, pCreateMode);
	}
			
	if ( pCreateMode ) {
		OutputVertexValidate(sub);
	}
#>

	}
<#+
	} //end subMap loop
}


public void OutputVertexProp(ApiProperty pProp, bool pCreateMode) {
	OutputVertexProp(pProp.GetDataTypeName(), pProp.Name, (pCreateMode ? pProp.CreateAccess+"" : null));
}


public void OutputVertexProp(IEdgeSchema pEdge, bool pCreateMode) {
	OutputVertexProp("long"+(pEdge.GetIsOptional() ? "?" : ""), pEdge.GetPropNameApi(),
			(pCreateMode ? pEdge.FabToVertexId.CreateAccess+"" : null));
}


public void OutputVertexProp(string pType, string pName, string pCreateAccess) {
#>
		public virtual <#= pType #> <#= pName #> { get; set; }
<#+
}


public void OutputVertexFill(IVertexSchema pVertex) {
#>


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public override void Fill(Vertex pVertex) {
			DomainToApi.From<#= pVertex.Names.Domain #>(this, (<#= pVertex.Names.Domain #>)pVertex);
		}

		/*--------------------------------------------------------------------------------------------*/
		public static <#= pVertex.Names.Api #> From<#= pVertex.Names.Domain #>(<#= pVertex.Names.Domain #> pVertex) {
			var v = new <#= pVertex.Names.Api #>();
			v.Fill(pVertex);
			return v;
		}
<#+
}


public void OutputVertexValidate(string pApiName) {
#>


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public override void Validate() {
			new Create<#= pApiName #>Validator(this).Validate();
		}
<#+
}
#>