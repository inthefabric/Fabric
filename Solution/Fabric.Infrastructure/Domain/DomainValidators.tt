<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.0.5.1\lib\Weaver.Core.dll" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.Titan.0.5.1\lib\Weaver.Titan.dll" #>
<#@ assembly name="$(ProjectDir)/bin/Debug/Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta/bin/Debug/Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System;

namespace Fabric.Infrastructure.Domain {


	/*================================================================================================*/
	public interface IDomainValidator {
	
	
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
<#
IList<string> verts = SchemaHelper.GetVertices();

foreach ( string name in verts ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
	WeaverVertexSchema vertex = hn.VertexSchema;
	
	if ( vertex.IsRoot ) { continue; }
	
	IList<SchemaHelperProp> vertexProps = hn.GetProps();

	foreach ( SchemaHelperProp hp in vertexProps ) {
		WeaverPropSchema prop = hp.PropSchema;
		string method = (prop.IsPrimaryKey == true ? "" : vertex.Name)+prop.Name;
#>
		void <#= method #>(<#= SchemaHelperProp.GetTypeName(prop.Type) #> pValue, string pParamName);
		void <#= method #>(<#= SchemaHelperProp.GetTypeName(prop.Type) #> pValue);
<#
	} //end prop loop
} //end vertex loop
#>
	}


	/*================================================================================================*/
	public partial class DomainValidator : IDomainValidator {

<#
foreach ( string name in verts ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
	WeaverVertexSchema vertex = hn.VertexSchema;
	
	if ( vertex.IsRoot ) { continue; }
	
	IList<SchemaHelperProp> vertexProps = hn.GetProps();
#>
		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( SchemaHelperProp hp in vertexProps ) {
		FabricPropSchema prop = hp.PropSchema;
		string method = (prop.IsPrimaryKey == true ? "" : vertex.Name)+prop.Name;
		int count = 0;
#>
		/*--------------------------------------------------------------------------------------------*/
		public void <#= method #>(<#= SchemaHelperProp.GetTypeName(prop.Type) #> pValue, string pParamName) {
<#
		if ( prop.IsNullable == true && !prop.Type.IsValueType ) {
			count++;
#>
			if ( pValue == null ) { return; }
<#
		}
		
		if ( prop.IsNullable != true && !prop.Type.IsValueType ) {
			count++;
#>
			NotNull(pParamName, pValue);
<#
		}

		if ( prop.EnumName != null ) {
			count++;
#>
			LongBetween(pParamName, pValue, 1, Enum.GetNames(typeof(<#= prop.EnumName #>)).Length);
<#
		}
		else if ( prop.IsPrimaryKey == true ) {
			count++;
#>
			LongNotEqualTo(pParamName, pValue, 0);
<#
		}

		if ( prop.LenMin != null && prop.LenMax != null ) {
			count++;
#>
			LengthBetween(pParamName, pValue, <#= prop.LenMin #>, <#= prop.LenMax #>);
<#
		}
		else if ( prop.LenMin != null ) {
			count++;
#>
			LengthGreaterThanOrEqual(pParamName, pValue, <#= prop.LenMin #>);
<#
		}
		else if ( prop.LenMax != null ) {
			count++;
#>
			LengthLessThanOrEqual(pParamName, pValue, <#= prop.LenMax #>);
<#
		}

		if ( prop.Min != null && prop.Max != null ) {
			count++;
#>
			LongBetween(pParamName, pValue, <#= prop.Min #>, <#= prop.Max #>);
<#
		}
		else if ( prop.Min != null ) {
			count++;
#>
			LongGreaterThanOrEqual(pParamName, pValue, <#= prop.Min #>);
<#
		}
		else if ( prop.Max != null ) {
			count++;
#>
			LongLessThanOrEqual(pParamName, pValue, <#= prop.Max #>);
<#
		}

		if ( prop.ValidRegex != null ) {
			count++;
			string pattern = prop.ValidRegex.Replace("\"", "\"\"");
#>
			MatchesRegex(pParamName, pValue, @"<#= pattern #>");
<#
		}

		if ( count == 0 ) {
#>
			throw new Exception("<#= prop.Name #> has no validation. Property value was "+pValue);
<#
		}
#>
		}

		/*--------------------------------------------------------------------------------------------*/
		public void <#= method #>(<#= SchemaHelperProp.GetTypeName(prop.Type) #> pValue) {
			<#= method #>(pValue, "<#= prop.Name #>");
		}

<#
	} //end prop loop
} //end vertex loop
#>
	}

}