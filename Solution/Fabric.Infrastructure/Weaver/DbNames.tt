<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)../Packages/Weaver.1.0.0/Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta/bin/Debug/Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System;
using System.Collections.Generic;
using Fabric.Domain;

namespace Fabric.Infrastructure.Weaver {

	// ReSharper disable InconsistentNaming

	/*================================================================================================*/
	public static class NodeDbName {

<#
var schema = new Schema();
IList<WeaverNodeSchema> nodes = schema.Nodes;

foreach ( WeaverNodeSchema ns in nodes ) {
#>
		public const string <#= ns.Name #> = "<#= ns.DbName #>";
<#
} //end node loop
#>

		public static IDictionary<Type, string> TypeMap;
		public static IDictionary<string, string> NameMap;
		private static readonly bool IsInit = Init();

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static bool Init() {
			TypeMap = new Dictionary<Type, string>();
			NameMap = new Dictionary<string, string>();
			
<#
foreach ( WeaverNodeSchema ns in nodes ) {
#>
			TypeMap.Add(typeof(<#= ns.Name #>), <#= ns.Name #>);
			NameMap.Add("<#= ns.Name #>", <#= ns.Name #>);

<#
} //end node loop
#>
			return true;
		}

	}


	/*================================================================================================*/
	public static class PropDbName {

<#
foreach ( WeaverNodeSchema ns in nodes ) {
	foreach ( WeaverPropSchema ps in ns.Props ) {
#>
		public const string <#= ns.Name+'_'+ps.Name #> = "<#= ps.DbName #>";
<#
	} //end prop loop
#>

<#
} //end node loop
#>

		public static IDictionary<Type, string> TypeIdMap;
		public static IDictionary<string, string> StrTypeIdMap;
		private static readonly bool IsInit = Init();

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static bool Init() {
			TypeIdMap = new Dictionary<Type, string>();
			StrTypeIdMap = new Dictionary<string, string>();
			
<#
foreach ( WeaverNodeSchema ns in nodes ) {
	var hn = new SchemaHelperNode(ns);
	SchemaHelperProp hp = hn.GetPrimaryKeyProp();
	if ( hp == null ) { continue; }

	string pkName = hp.PropSchema.Name;
	pkName = pkName.Substring(0, pkName.Length-2)+"_"+pkName;
#>
			TypeIdMap.Add(typeof(<#= ns.Name #>), <#= pkName #>);
			StrTypeIdMap.Add("<#= ns.Name #>", <#= pkName #>);

<#
} //end node loop
#>
			return true;
		}

	}


	/*================================================================================================*/
	public static class RelDbName {

<#
foreach ( WeaverRelSchema rs in schema.Rels ) {
#>
		public const string <#= rs.Name #> = "<#= rs.DbName #>";
<#
} //end node loop
#>

		public static IDictionary<Type, string> TypeMap;
		private static readonly bool IsInit = Init();

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static bool Init() {
			TypeMap = new Dictionary<Type, string>();
			
<#
foreach ( WeaverRelSchema rs in schema.Rels ) {
#>
			TypeMap.Add(typeof(<#= rs.Name #>), <#= rs.Name #>);
<#
} //end re; loop
#>

			return true;
		}

	}

	// ReSharper restore InconsistentNaming

}
