<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)../Packages/Weaver.1.0.0/Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta/bin/Debug/Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;
using Fabric.Domain;
using Weaver.Interfaces;
using Weaver.Items;

namespace Fabric.Infrastructure.Weaver {

<#
IList<string> nodes = SchemaHelper.GetNodes();

foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverNodeSchema node = hn.NodeSchema;
	
	if ( node.IsRoot ) { continue; }

	IList<SchemaHelperNodeRel> nodeRels = hn.GetRels();
	string nodeType = (node.IsBaseClass ? "T" : node.Name);
	string baseType = (node.BaseNode == null ? "Domain" : node.BaseNode.Name);

	if ( node.IsBaseClass ) {
#>
	/*================================================================================================*/
	public abstract class <#= node.Name #>Builder<<#= nodeType #>, TRootRel> : DomainBuilder<T, TRootRel>
						where T : INode, new() where TRootRel : WeaverRel<Root, Contains, T>, new() {

<#
	}
	else {
#>
	/*================================================================================================*/
	public class <#= node.Name #>Builder : <#= baseType #>Builder<<#= nodeType #>, RootContains<#= node.Name #>> {

<#
	} //end abstract condition

	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( hr.TargetNodeType == "Root" ) {
			continue;
		}
		
		string type = "IWeaverVarAlias<"+hr.TargetNodeType+">";
		
		if ( hr.IsMany ) {
			type = "IList<"+type+">";
		}
#>
		public virtual <#= type #> <#= hr.RelPropName #> { get; private set; }
<#
	} //end rel loop
#>
		

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= node.Name #>Builder(TxBuilder pTx, <#= nodeType #> pNode) : base(pTx, pNode) {}
		
		/*--------------------------------------------------------------------------------------------*/
		public <#= node.Name #>Builder(TxBuilder pTx) : base(pTx) {}

<#
	if ( !node.IsBaseClass ) {
		string idType = hn.GetPrimaryKeyProp().TypeName;
#>
		/*--------------------------------------------------------------------------------------------*/
		public <#= node.Name #>Builder(TxBuilder pTx, <#= idType #> p<#= node.Name #>Id) : 
			base(pTx, new <#= node.Name #> { <#= node.Name #>Id = p<#= node.Name #>Id }) {}
		
		
<#
	} //end abstract condition

	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		string method = (hr.IsMany ? "AddTo" : "Set")+hr.RelPropName;
		string t = hr.TargetNodeType;
		bool isRoot = (t == "Root");
		SchemaHelperProp targKeyProp = SchemaHelper.GetNode(hr.TargetNodeType).GetPrimaryKeyProp();
		string targNodeIdType = (targKeyProp != null ? targKeyProp.TypeName : "XXX");
		
		if ( !isRoot ) {
#>		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public virtual void <#= method #>(IWeaverVarAlias<<#= t #>> pTargetNodeVar) {
<#
			if ( hr.IsOutgoing ) {
#>
			TxBuild.AddRel<<#= hr.RelName #>>(NodeVar, pTargetNodeVar);
<#
			}
			else {
#>
			TxBuild.AddRel<<#= hr.RelName #>>(pTargetNodeVar, NodeVar);
<#
			}
			
			if ( hr.IsMany ) {
#>
			<#= hr.RelPropName #> = (<#= hr.RelPropName #> ?? new List<IWeaverVarAlias<<#= t #>>>());
			<#= hr.RelPropName #>.Add(pTargetNodeVar);
<#
			}
			else {
#>
			<#= hr.RelPropName #> = pTargetNodeVar;
<#
			} //end is-many
#>
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public virtual void <#= method #>(<#= t #> p<#= t #>, out IWeaverVarAlias<<#= t #>> pNodeVar) {
			TxBuild.GetNode(p<#= t #>, out pNodeVar);
			<#= method #>(pNodeVar);
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public virtual void <#= method #>(<#= t #> p<#= t #>) {
			IWeaverVarAlias<<#= t #>> nodeVar;
			<#= method #>(p<#= t #>, out nodeVar);
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public virtual void <#= method #>(<#= targNodeIdType #> p<#= t #>Id, out IWeaverVarAlias<<#= t #>> pNodeVar) {
			<#= method #>(new <#= t #> { <#= t #>Id = p<#= t #>Id }, out pNodeVar);
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public virtual void <#= method #>(<#= targNodeIdType #> p<#= t #>Id) {
			IWeaverVarAlias<<#= t #>> nodeVar;
			<#= method #>(p<#= t #>Id, out nodeVar);
		}
		
<#
		} //end if/else
	} //end rel loop
#>

	}

<#
} //end node loop
#>
}
