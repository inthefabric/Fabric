<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Schemas\bin\Debug\Fabric.Domain.Schemas.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Fabric.Domain.Schemas.Edges" #>
<#@ import namespace="Fabric.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using System.Collections.Generic;
using Fabric.Api.Objects;
using Fabric.Api.Objects.Traversal;
using Fabric.Domain.Enums;
using Fabric.Operations.Traversal.Routing;

namespace Fabric.Operations.Traversal.Steps {

	/*================================================================================================*/
	public static class TravSteps {

		public static readonly IList<ITravStep> LinkList = new List<ITravStep> {
<#
IList<IVertexSchema> verts = SchemaUtil.GetVertexSchemas();
IList<IEdgeSchema> allEdges = SchemaUtil.GetEdgeSchemas();
var edges = new List<IEdgeSchema>();

foreach ( IEdgeSchema e in allEdges ) {
	IVertexSchema fv = e.GetFromVertex();
	IVertexSchema tv = e.GetToVertex();

	if ( fv.GetAccess != Access.All || tv.GetAccess != Access.All ) {
		continue;
	}

	edges.Add(e);
}

foreach ( IEdgeSchema e in edges ) {
	IVertexSchema fv = e.GetFromVertex();
	IVertexSchema tv = e.GetToVertex();

	string link = e.GetPropNameLink();
	string name = fv.Names.Domain+link+"Step";
	string fromType = fv.Names.Api;
	string toType = tv.Names.Api;
	string inVert = "true";

	if ( SchemaUtil.GetEdgeProperties(e).Count > 0 ) {
		toType = e.GetClassNameApi(false);
		inVert = "false";
	}
#>
			new TravStepLink<<#= fromType #>, <#= toType #>>("<#= link #>", "<#= e.NameDb #>", <#= inVert #>),
<#
} // end edge loop
#>
		};

		public static readonly IList<ITravStep> VertexHasList = new List<ITravStep> {
<#
foreach ( IVertexSchema v in verts ) {
	IDictionary<ApiProperty, PropertyMapping> propMaps = SchemaUtil.GetVertexApiPropertyMaps(v);

	foreach ( ApiProperty ap in propMaps.Keys ) {
		if ( ap.GetAccess != Access.All || ap.TraversalHas == Matching.None ) {
			continue;
		}

		PropertyMapping pm = propMaps[ap];
		string apiType = ap.GetDataTypeName().Replace("?", "");
		string withWhere = (ap.IsTraversalHasExact() ? "With" : "Where");
		string name = withWhere+(ap.SubObjectOf == null ? "" : ap.SubObjectOf.Substring(3))+ap.Name;

		if ( ap.TraversalHas == Matching.Custom ) {
#>
			TravStepsCustom.<#= v.Names.Domain+name #><<#= v.Names.Api #>, <#= apiType #>, <#= v.Names.Api #>>("<#= name #>", "<#= pm.Domain.DbName #>"),
<#
			continue;
		}
#>
			new TravStep<#= withWhere #><<#= v.Names.Api #>, <#= apiType #>, <#= v.Names.Api #>>("<#= name #>", "<#= pm.Domain.DbName #>"),
<#
	} // end property loop
} // end vertex loop
#>
		};

		public static readonly IList<ITravStep> LinkHasList = new List<ITravStep> {
<#
foreach ( IEdgeSchema e in edges ) {
	string edgeName = e.GetClassNameApi(false);
	IList<EdgeProperty> props = SchemaUtil.GetEdgeProperties(e);

	foreach ( EdgeProperty p in props ) {
		string type = p.GetApiDataTypeName();
		ApiProperty ap = p.GetApiProp();
		string withWhere = (ap.IsTraversalHasExact() ? "With" : "Where");
		string name = withWhere+p.Name;
		
		if ( ap.TraversalHas == Matching.Custom ) {
#>
			TravStepsCustom.<#= edgeName.Substring(3)+name #><<#= edgeName #>, <#= type #>, <#= edgeName #>>("<#= name #>", "<#= p.DbName #>"),
<#
			continue;
		}
#>
			new TravStep<#= withWhere #><<#= edgeName #>, <#= type #>, <#= edgeName #>>("<#= name #>", "<#= p.DbName #>"),
<#
	} // end property loop
} // end edge loop
#>
		};

		public static readonly IList<ITravStep> LinkTakeList = new List<ITravStep> {
<#
foreach ( IEdgeSchema e in edges ) {
	if ( SchemaUtil.GetEdgeProperties(e).Count == 0 ) {
		continue;
	}

	string edgeName = e.GetClassNameApi(false);
	IVertexSchema tv = e.GetToVertex();
#>
			new TravStepTake<<#= edgeName #>, <#= tv.Names.Api #>>("Take<#= tv.Names.DomainPlural #>", true),
<#
} // end edge loop
#>
		};

		public static readonly IList<ITravStep> ToTypeList = new List<ITravStep> {
<#
foreach ( IVertexSchema v in verts ) {
	if ( v.GetAccess != Access.All ) {
		continue;
	}

	IVertexSchema vp = SchemaUtil.GetVertexParent(v);

	while ( vp != null ) {
#>
			new TravStepTo<<#= vp.Names.Api #>, <#= v.Names.Api #>>("To<#= v.Names.Domain #>", VertexType.Id.<#= v.Names.Domain #>),
<#
		vp = SchemaUtil.GetVertexParent(vp);
	} //end parent loop
} // end vertex loop
#>
		};

		public static readonly IList<ITravStep> EntryList = new List<ITravStep> {
<#
foreach ( IVertexSchema v in verts ) {
	if ( v.GetAccess != Access.All ) {
		continue;
	}
	
	IDictionary<ApiProperty, PropertyMapping> propMaps = SchemaUtil.GetVertexApiPropertyMaps(v);

	foreach ( ApiProperty ap in propMaps.Keys ) {
		if ( ap.GetAccess != Access.All ) {
			continue;
		}

		PropertyMapping pm = propMaps[ap];

		if ( pm.Domain.IsElastic ) {
			if ( ap.TraversalHas == Matching.Custom ) {
#>
			TravStepsCustom.<#= v.Names.Domain #>EntryWhere<#= ap.Name #><FabTrav<#= v.Names.Domain #>Root, <#= ap.GetDataTypeName() #>, <#= v.Names.Api #>>("<#= ap.Name #>", "<#= pm.Domain.DbName #>"),
<#
			}
			else if ( ap.DataType == typeof(string) ) {
#>
			new TravStepEntryContains<FabTrav<#= v.Names.Domain #>Root, <#= v.Names.Api #>>("Where<#= ap.Name #>Contains", "<#= pm.Domain.DbName #>"),
<#
			}
			else {
#>
			new TravStepEntryWhere<FabTrav<#= v.Names.Domain #>Root, <#= ap.GetDataTypeName() #>, <#= v.Names.Api #>>("Where<#= ap.Name #>", "<#= pm.Domain.DbName #>"),
<#
			} //end DataType conditions
		} //end IsElastic condition

		if ( pm.Domain.IsIndexed ) {
			if ( ap.TraversalHas == Matching.Custom ) {
				throw new Exception("Custom not handled for IsIndexed.");
			}

			string toLower = (ap.ToLowerCase+"").ToLower();
#>
			new TravStepEntryWith<FabTrav<#= v.Names.Domain #>Root, <#= ap.GetDataTypeName() #>, <#= v.Names.Api #>>("With<#= ap.Name #>", "<#= pm.Domain.DbName #>", <#= toLower #>),
<#
		} //end IsIndexed condition

		if ( pm.Domain.ExactIndexVia != null ) {
			if ( ap.TraversalHas == Matching.Custom ) {
				throw new Exception("Custom not handled for ExactIndexVia.");
			}

			DomainProperty eiv = pm.Domain.ExactIndexVia;
			string toLower = (eiv.ToLowerCase+"").ToLower();
#>
			new TravStepEntryWith<FabTrav<#= v.Names.Domain #>Root, <#= ap.GetDataTypeName() #>, <#= v.Names.Api #>>("With<#= ap.Name #>", "<#= eiv.DbName #>", <#= toLower #>),
<#
		} //end IsElastic condition


	} // end property loop
} // end vertex loop
#>
		};

		public static readonly IList<ITravStep> RootList = new List<ITravStep> {
<#
foreach ( IVertexSchema v in verts ) {
	if ( v.GetAccess != Access.All ) {
		continue;
	}
#>
			new TravStepRoot<FabTrav<#= v.Names.Domain #>Root>("<#= v.Names.DomainPlural #>"),
<#
} // end vertex loop
#>
		};

	}

}