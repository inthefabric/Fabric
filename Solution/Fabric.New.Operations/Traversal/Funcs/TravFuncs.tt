<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Edges" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using System.Collections.Generic;
using Fabric.New.Api.Objects;

namespace Fabric.New.Operations.Traversal.Funcs {
<#
IList<IVertexSchema> verts = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in verts ) {
	if ( v.GetAccess != Access.All ) {
		//continue;
	}

	IVertexSchema vp = SchemaUtil.GetVertexParent(v);
	string baseName = (vp == null ? "VertexBase" : vp.Names.Domain);
	string useNew = (vp == null ? "" : "new ");
	string forObj = v.Names.Api;

	IList<DomainProperty> props = SchemaUtil.GetVertexDomainProperties(v);
	IList<IEdgeSchema> edges = SchemaUtil.GetEdgeSchemasForVertex(v, false);
#>


	/*================================================================================================*/
	public class <#= v.Names.Domain #>Funcs : <#= baseName #>Funcs {
		
		public <#= useNew #>static readonly <#= v.Names.Domain #>Funcs Instance = new <#= v.Names.Domain #>Funcs();

		private readonly IList<ITravFunc> vFuncs = new List<ITravFunc> {
<#
	foreach ( DomainProperty dp in props ) {
#>
			new TravFunc<<#= forObj #>>("Has<#= dp.Name #>"),
<#
	} // end property loop

	foreach ( IEdgeSchema es in edges ) {
		IList<EdgeProperty> edgeProps = SchemaUtil.GetEdgeProperties(es);
		string link = es.GetPropNameLink();
		
		foreach ( EdgeProperty ep in edgeProps ) {
#>
			new TravFunc<<#= forObj #>>("Has<#= ep.Name #>", "<#= link #>"),
<#
		} //end edgeProp loop
	} // end edge loop
#>
		};

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= v.Names.Domain #>Funcs() {
			Funcs.AddRange(vFuncs);
		}
		
	}
<#
} // end vertex loop
#>

}