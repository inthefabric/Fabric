<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Edges" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using System.Collections.Generic;
using Fabric.New.Api.Objects;

namespace Fabric.New.Operations.Traversal.Links {
<#
IList<IVertexSchema> verts = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in verts ) {
	if ( v.GetAccess != Access.All ) {
		//continue;
	}

	IVertexSchema vp = SchemaUtil.GetVertexParent(v);
	string baseName = (vp == null ? "VertexBase" : vp.Names.Domain);
	string useNew = (vp == null ? "" : "new ");

	IList<IEdgeSchema> edges = SchemaUtil.GetEdgeSchemasForVertex(v, false);
#>


	/*================================================================================================*/
	public class <#= v.Names.Domain #>Links : <#= baseName #>Links {
		
		public <#= useNew #>static readonly <#= v.Names.Domain #>Links Instance = new <#= v.Names.Domain #>Links();

		private readonly IList<ITravLink> vLinks = new List<ITravLink> {
<#
	foreach ( IEdgeSchema es in edges ) {
		string name = es.GetPropNameLink();
		string toOne = (!es.GetIsMultiple()+"").ToLower();
#>
			new TravLink<<#= es.GetToVertex().Names.Api #>>("<#= name #>", <#= toOne #>),
<#
	} // end edge loop
#>
		};

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= v.Names.Domain #>Links() {
			Links.AddRange(vLinks);
		}
		
	}
<#
} // end vertex loop
#>

}