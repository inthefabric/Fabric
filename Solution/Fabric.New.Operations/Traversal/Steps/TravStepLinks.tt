<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Fabric.New.Domain.Schemas\bin\Debug\Fabric.New.Domain.Schemas.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Edges" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Utils" #>
<#@ import namespace="Fabric.New.Domain.Schemas.Vertices" #>
<#@ output extension=".cs" #>

// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.New.Api.Objects;

namespace Fabric.New.Operations.Traversal.Steps {
<#
IList<IVertexSchema> verts = SchemaUtil.GetVertexSchemas();

foreach ( IVertexSchema v in verts ) {
	if ( v.GetAccess != Access.All ) {
		//continue;
	}

	IList<IEdgeSchema> edges = SchemaUtil.GetEdgeSchemasForVertex(v, false);

	foreach ( IEdgeSchema es in edges ) {
		string link = es.GetPropNameLink();
		string name = v.Names.Domain+link+"Step";
		string fromType = es.GetFromVertex().Names.Api;
		string toType = es.GetToVertex().Names.Api;
#>


	/*================================================================================================*/
	public class <#= name #> : TravStep<<#= fromType #>, <#= toType #>> {
	
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= name #>() : base("<#= link #>", 0) {}

		/*--------------------------------------------------------------------------------------------*/
		public override void ConsumePath(ITravPath pPath) {}

	}
<#
	} // end edge loop
} // end vertex loop
#>

}