<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.0.5.2\lib\Weaver.Core.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using Fabric.Api.Dto.Traversal;
using Fabric.Api.Traversal.Steps.Vertices;
using Fabric.Infrastructure.Traversal;

namespace Fabric.Api.Traversal.Steps.Functions {
<#
IList<string> vertexNames = SchemaHelper.GetRootLinks();
#>

	/*================================================================================================*/
	public abstract partial class RootTypeFunc {


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		internal static void RegisterAllFunctions() {
<#
foreach ( string name in vertexNames ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
#>
			FuncRegistry.Register<<#= hn.PluralName #>Func>(p => new <#= hn.PluralName #>Func(p), AllowedForStep);
<#
} //end vertex loop
#>
		}

	}

<#
foreach ( string name in vertexNames ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
#>

	/*================================================================================================*/
	[Func("<#= hn.PluralName #>")]
	public class <#= hn.PluralName #>Func : RootTypeFunc {


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= hn.PluralName #>Func(IPath pPath) : base(pPath) {
			ProxyStep = new RootTypeStep<FabRootType<Fab<#= name #>>>(pPath);
		}

	}

<#
} //end vertex loop
#>
}