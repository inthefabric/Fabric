<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.0.5.2\lib\Weaver.Core.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System;
using Fabric.Api.Dto.Traversal;
using Fabric.Api.Traversal.Steps.Vertices;
using Fabric.Domain;
using Fabric.Infrastructure.Traversal;

namespace Fabric.Api.Traversal.Steps.Functions {
<#
IList<string> vertexNames = SchemaHelper.GetRootLinks();
#>

	/*================================================================================================*/
	public abstract partial class IdIndexFunc {


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		internal static new void RegisterAllFunctions() {
<#
foreach ( string name in vertexNames ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
#>
			FuncRegistry.Register<<#= name #>IdIndexFunc>(p => new <#= name #>IdIndexFunc(p), <#= name #>IdIndexFunc.AllowedForStep);
<#
} //end vertex loop
#>
		}

	}

<#
foreach ( string name in vertexNames ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
#>

	/*================================================================================================*/
	[Func("<#= name #>")]
	public class <#= name #>IdIndexFunc : IdIndexFunc {


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= name #>IdIndexFunc(IPath pPath) : base(pPath) {
			ProxyStep = new <#= name #>Step(pPath);
			PropName = (ProxyStep as IVertexStep).TypeIdName;
<#
	if ( !hn.VertexSchema.IsBaseClass ) {
#>
			FabType = (byte)VertexFabType.<#= name #>;
<#
	}
#>
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public static bool AllowedForStep(Type pDtoType) {
			return (pDtoType == typeof(FabRootType<Fab<#= name #>>));
		}

	}

<#
} //end vertex loop
#>
}