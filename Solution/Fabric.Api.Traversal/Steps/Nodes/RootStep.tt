<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.1.0.0\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;
using System.Linq;
using Fabric.Api.Dto.Traversal;
using Fabric.Domain;
using Fabric.Infrastructure.Traversal;
using Fabric.Infrastructure.Weaver;
using Weaver;

namespace Fabric.Api.Traversal.Steps.Nodes {
	
	/*================================================================================================*/
	public class RootStep : NodeStep<FabRoot>, IFinalStep {
	
		private static readonly List<IStepLink> AvailNodeLinks = new List<IStepLink> {
<#
IList<string> nodeNames = SchemaHelper.GetRootLinks();

foreach ( string name in nodeNames ) {
#>
			new StepLink("Contains", "<#= name #>", true, "/Contains<#= name #>List"),
<#
} //end node loop
#>
		};
		
		public bool UseLocalData { get { return true; } }
		public long Index { get { return 0; } }
		public int Count { get { return 1; } }


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public RootStep(IPath pPath) : base(pPath) {
			pPath.AddSegment(this, "g");
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public override string TypeIdName { get { return null; } }
		public override bool TypeIdIsLong { get { return false; } }
		
		/*--------------------------------------------------------------------------------------------*/
		public override List<IStepLink> AvailableLinks {
			get { return base.AvailableLinks.Concat(AvailNodeLinks).ToList(); }
		}
		
		/*--------------------------------------------------------------------------------------------*/
		protected override IStep GetLink(StepData pData) {
			switch ( pData.Command ) {
<#
foreach ( string name in nodeNames ) {
#>
				case "contains<#= name.ToLower() #>list": return Contains<#= name #>List;
<#
} //end node loop
#>
			}

			return base.GetLink(pData);
		}

		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
foreach ( string name in nodeNames ) {
#>
		/*--------------------------------------------------------------------------------------------*/
		public I<#= name #>Step Contains<#= name #>List {
			get {
				var step = new <#= name #>Step(Path);
				string p = Path.AddParam(new WeaverQueryVal((byte)NodeFabType.<#= name #>));
				Path.AddSegment(step, "V('"+PropDbName.Node_FabType+"',"+p+")");
				return step;
			}
		}

<#
} //end node loop
#>
	}

}