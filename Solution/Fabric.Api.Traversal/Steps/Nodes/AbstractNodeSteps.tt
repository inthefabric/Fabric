<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.1.0.0\Weaver.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Items" #>
<#@ import namespace="Weaver.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;
using System.Linq;
using Fabric.Api.Dto.Traversal;
using Fabric.Infrastructure.Traversal;

namespace Fabric.Api.Traversal.Steps.Nodes {
	
<#
IList<string> nodeNames = SchemaHelper.GetNodes();

foreach ( string name in nodeNames ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverNodeSchema node = hn.NodeSchema;
	if ( (!node.IsAbstract || node.IsInternal) && node.Name != "Artifact" ) { continue; }

	IList<SchemaHelperNodeRel> nodeRels = hn.GetRels(true);
	string typeIdIsLong = "false";
	
	foreach ( WeaverPropSchema prop in node.Props ) {
		if ( prop.Name != node.Name+"Id" ) { continue; }
		typeIdIsLong = (prop.Type == typeof(long) ? "true" : "false");
		break;
	}
#>
	/*================================================================================================*/
	public abstract partial class <#= node.Name #>Step<T> : NodeStep<T>, I<#= node.Name #>Step
																			where T : FabNode, new() {
	
		private static readonly List<IStepLink> AvailNodeLinks = new List<IStepLink> {
<#
	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( node.Name != "Root" && hr.FromNodeName == "Root" ) { continue; }
#>
			new StepLink("<#= hr.RelTypeName #>", "<#= hr.TargetNodeType #>", <#= hr.IsOutgoing.ToString().ToLower() #>, "/<#= hr.RelPropName #>"),
<#
	}
#>
		};


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= node.Name #>Step(IPath pPath) : base(pPath) {
			ConstructorHook();
		}
		
		/*--------------------------------------------------------------------------------------------*/
		partial void ConstructorHook();

		/*--------------------------------------------------------------------------------------------*/
		public override List<IStepLink> AvailableLinks {
			get { return base.AvailableLinks.Concat(AvailNodeLinks).ToList(); }
		}
		
		/*--------------------------------------------------------------------------------------------*/
		protected override IStep GetLink(StepData pData) {
			switch ( pData.Command ) {
<#
	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		if ( node.Name != "Root" && hr.FromNodeName == "Root" ) { continue; }
		var propName = hr.RelPropName;
#>
				case "<#= propName.ToLower() #>": return <#= propName #>;
<#
	} //end nodeRels loop
#>
			}

			return base.GetLink(pData);
		}


		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( SchemaHelperNodeRel hr in nodeRels ) {
		var propType = hr.TargetNodeType+"Step";
		var script = (hr.IsOutgoing ? "outE" : "inE")+"('"+hr.RelName+"')."+
			(hr.IsOutgoing ? "inV" : "outV");
#>
		/*--------------------------------------------------------------------------------------------*/
		public I<#= propType #> <#= hr.RelPropName #> {
			get {
				var step = new <#= propType #>(Path);
				Path.AddSegment(step, "<#= script #>");
				return step;
			}
		}

<#
	} //end nodeRels loop
#>
	}

<#
} //end nodes loop
#>
}