<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver.0.5.4\lib\Weaver.Core.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

namespace Fabric.Api.Traversal.Steps.Vertices {
	
<#
IList<string> vertexNames = SchemaHelper.GetVertices();
var intMap = new Dictionary<string,bool>();

foreach ( string name in vertexNames ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
	IList<SchemaHelperVertexEdge> vertexEdges = hn.GetEdges(true);

	foreach ( SchemaHelperVertexEdge hr in vertexEdges ) {
		if ( intMap.ContainsKey(hr.EdgePropName) ) { continue; }
		intMap.Add(hr.EdgePropName, true);
#>
	/*================================================================================================*/
	public interface I<#= hr.EdgePropName #> {
		I<#= hr.TargetVertexType #>Step <#= hr.EdgePropName #> { get; }
	}

<#
	} //end vertexEdges loop
} //end verts loop

foreach ( string name in vertexNames ) {
	SchemaHelperVertex hn = SchemaHelper.GetVertex(name);
	WeaverVertexSchema vertex = hn.VertexSchema;
	if ( vertex.IsInternal ) { continue; }

	IList<SchemaHelperVertexEdge> vertexEdges = hn.GetEdges(true);
	string baseVertex = (vertex.BaseVertex == null ? "Vertex" : vertex.BaseVertex.Name);
	string interfaces = "I"+baseVertex+"Step";

	if ( vertex.Name == "Root" ) {
		interfaces += ", IFinalStep";
	}

	foreach ( SchemaHelperVertexEdge hr in vertexEdges ) {
		interfaces += ", I"+hr.EdgePropName;
	}
	
	string typeIdIsLong = "false";
	
	foreach ( WeaverPropSchema prop in vertex.Props ) {
		if ( prop.Name != vertex.Name+"Id" ) { continue; }
		typeIdIsLong = (prop.Type == typeof(long) ? "true" : "false");
		break;
	}
#>
	/*================================================================================================*/
	public interface I<#= vertex.Name #>Step :
		<#= interfaces #> {
	}

<#
} //end verts loop
#>
}