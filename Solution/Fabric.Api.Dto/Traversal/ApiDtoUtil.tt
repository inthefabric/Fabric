<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)..\Packages\Weaver\Weaver.Core.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain\bin\Debug\Fabric.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Fabric.Domain.Meta\bin\Debug\Fabric.Domain.Meta.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="Fabric.Domain" #>
<#@ import namespace="Fabric.Domain.Meta" #>
<#@ import namespace="Weaver.Core.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System;
using Fabric.Infrastructure.Db;
using ServiceStack.Text;

namespace Fabric.Api.Dto.Traversal {

	/*================================================================================================*/
	public static class ApiDtoUtil {
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public static IFabNode ToDto(DbDto pDbDto) {
			switch ( pDbDto.Class ) {
<#
IList<string> nodes = SchemaHelper.GetVertices();

foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverVertexSchema node = hn.NodeSchema;
	if ( node.IsAbstract || node.IsInternal ) { continue; }
#>
				case "<#= node.Name #>": return ToDto<Fab<#= node.Name #>>(pDbDto);
<#
}
#>
				default: throw new Exception("Unknown DbDto class: "+pDbDto.Class);
			}
		}

		/*--------------------------------------------------------------------------------------------*/
		public static string ToDtoJson(DbDto pDbDto) {
			switch ( pDbDto.Class ) {
<#
foreach ( string name in nodes ) {
	SchemaHelperNode hn = SchemaHelper.GetNode(name);
	WeaverVertexSchema node = hn.NodeSchema;
	if ( node.IsAbstract || node.IsInternal ) { continue; }
#>
				case "<#= node.Name #>": return ToDtoJson<Fab<#= node.Name #>>(pDbDto);
<#
}
#>
				default: throw new Exception("Unknown DbDto class: "+pDbDto.Class);
			}
		}

		/*--------------------------------------------------------------------------------------------*/
		private static T ToDto<T>(DbDto pDbDto) where T : IFabNode, new() {
			var node = new T();
			node.Fill(pDbDto);
			return node;
		}

		/*--------------------------------------------------------------------------------------------*/
		private static string ToDtoJson<T>(DbDto pDbDto) where T : IFabNode, new() {
			var node = new T();
			node.Fill(pDbDto);
			return node.ToJson();
		}

	}

}